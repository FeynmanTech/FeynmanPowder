/**
#ifdef LUACONSOLE
#include "luaconsole.h"

void luaopen_multiplayer(lua_State *l)
{
#ifndef _MSC_VER
	int multiplayer_luac_sz = 64356;
	const char* multiplayer_luac = "--Cracker64's Powder Toy Multiplayer\n--I highly recommend to use my Autorun Script Manager\n\nlocal versionstring = \"0.83\"\n\n--TODO's\n--FIGH,STKM,STK2,LIGH need a few more creation adjustments\n--Some more server functions\n-------------------------------------------------------\n\n--CHANGES:\n--Lots of Fixes\n--More colors!\n--ESC key will unfocus, then minimize chat\n--Changes from jacob, including: Support jacobsMod, keyrepeat\n--Support replace mode\n\nif TPTMP then if TPTMP.version <= 2 then TPTMP.disableMultiplayer() else error(\"newer version already running\") end end local get_name = tpt.get_name -- if script already running, replace it\nTPTMP = {[\"version\"] = 2} -- script version sent on connect to ensure server protocol is the same\nlocal issocket,socket = pcall(require,\"socket\")\nif not tpt.selectedreplace then error\"Tpt version not supported\" end\nlocal using_manager = false\nlocal _print = print\nif MANAGER ~= nil or MANAGER_EXISTS then\n\011using_manager = true\n\011_print = MANAGER and MANAGER.print or MANAGER_PRINT\nelse\n\011_print = print\nend\nlocal hooks_enabled = false --hooks only enabled once you maximize the button\n\nlocal PORT = 34403 --Change 34403 to your desired port\nlocal KEYBOARD = 1 --only change if you have issues. Only other option right now is 2(finnish).\n--Local player vars we need to keep\nlocal L = {mousex=0, mousey=0, brushx=0, brushy=0, sell=1, sela=296, selr=0, selrep=0, replacemode = 0, mButt=0, mEvent=0, dcolour=0, stick2=false, chatHidden=true, flashChat=false,\nshift=false, alt=false, ctrl=false, tabs = false, z=false, downInside=nil, skipClick=false, pauseNextFrame=false, copying=false, stamp=false, placeStamp=false, lastStamp=nil, lastCopy=nil, smoved=false, rotate=false, sendScreen=false}\n\nlocal tptversion = tpt.version.build\nlocal jacobsmod = tpt.version.jacob1s_mod~=nil\nmath.randomseed(os.time())\nlocal username = get_name()\nif username == \"\" then\n\011username = \"Guest\"..math.random(10000,99999)\nend\nlocal chatwindow\nlocal con = {connected = false,\n\011\011 socket = nil,\n\011\011 members = nil,\n\011\011 pingTime = os.time()+60}\nlocal function disconnected(reason)\n\011if con.socket then\n\011\011con.socket:close()\n\011end\n\011if reason then\n\011\011chatwindow:addline(reason,255,50,50)\n\011else\n\011\011chatwindow:addline(\"Connection was closed\",255,50,50)\n\011end\n\011con.connected = false\n\011con.members = {}\nend\nlocal function conSend(cmd,msg,endNull)\n\011if not con.connected then return false,\"Not connected\" end\n\011msg = msg or \"\"\n\011if endNull then msg = msg..\"\\0\" end\n\011if cmd then msg = string.char(cmd)..msg end\n\011--print(\"sent \"..msg)\n\011con.socket:settimeout(10)\n\011con.socket:send(msg)\n\011con.socket:settimeout(0)\nend\nlocal function joinChannel(chan)\n\011conSend(16,chan,true)\n\011--send some things to new channel\n\011conSend(34,string.char(L.brushx,L.brushy))\n\011conSend(37,string.char(math.floor(L.sell/256),L.sell%256))\n\011conSend(37,string.char(math.floor(64 + L.sela/256),L.sela%256))\n\011conSend(37,string.char(math.floor(128 + L.selr/256),L.selr%256))\n\011conSend(37,string.char(math.floor(192 + L.selrep/256),L.selrep%256))\n\011conSend(38,L.replacemode)\n\011conSend(65,string.char(math.floor(L.dcolour/16777216),math.floor(L.dcolour/65536)%256,math.floor(L.dcolour/256)%256,L.dcolour%256))\nend\nlocal function connectToServer(ip,port,nick)\n\011if con.connected then return false,\"Already connected\" end\n\011ip = ip or \"starcatcher.us\"\n\011port = port or PORT\n\011local sock = socket.tcp()\n\011sock:settimeout(10)\n\011local s,r = sock:connect(ip,port)\n\011if not s then return false,r end\n\011sock:settimeout(0)\n\011sock:setoption(\"keepalive\",true)\n\011sock:send(string.char(tpt.version.major)..string.char(tpt.version.minor)..string.char(TPTMP.version)..nick..\"\\0\")\n\011local c,r\n\011while not c do\n\011c,r = sock:receive(1)\n\011if not c and r~=\"timeout\" then break end\n\011end\n\011if not c and r~=\"timeout\" then return false,r end\n\n\011if c~= \"\\1\" then\n\011if c==\"\\0\" then\n\011\011local err=\"\"\n\011\011c,r = sock:receive(1)\n\011\011while c~=\"\\0\" do\n\011\011err = err..c\n\011\011c,r = sock:receive(1)\n\011\011end\n\011\011if err==\"This nick is already on the server\" then\n\011\011\011nick = nick:gsub(\"(.)$\",function(s) local n=tonumber(s) if n and n+1 <= 9 then return n+1 else return nick:sub(-1)..'0' end end)\n\011\011\011return connectToServer(ip,port,nick)\n\011\011end\n\011\011return false,err\n\011end\n\011return false,\"Bad Connect\"\n\011end\n\n\011con.socket = sock\n\011con.connected = true\n\011username = nick\n\011conSend(34,string.char(L.brushx,L.brushy))\n\011conSend(37,string.char(math.floor(L.sell/256),L.sell%256))\n\011conSend(37,string.char(math.floor(64 + L.sela/256),L.sela%256))\n\011conSend(37,string.char(math.floor(128 + L.selr/256),L.selr%256))\n\011conSend(37,string.char(math.floor(192 + L.selrep/256),L.selrep%256))\n\011conSend(38,L.replacemode)\n\011conSend(65,string.char(math.floor(L.dcolour/16777216),math.floor(L.dcolour/65536)%256,math.floor(L.dcolour/256)%256,L.dcolour%256))\n\011return true\nend\n--get up to a null (\\0)\nlocal function conGetNull()\n\011con.socket:settimeout(nil)\n\011local c,r = con.socket:receive(1)\n\011if not c and r ~= \"timeout\" then disconnected() return nil end\n\011local rstring=\"\"\n\011while c~=\"\\0\" do\n\011rstring = rstring..c\n\011c,r = con.socket:receive(1)\n\011if not c and r ~= \"timeout\" then disconnected() return nil end\n\011end\n\011con.socket:settimeout(0)\n\011return rstring\nend\n--get next char/byte\nlocal function cChar()\n\011con.socket:settimeout(nil)\n\011local c,r = con.socket:receive(1)\n\011con.socket:settimeout(0)\n\011if not c then disconnected() end\n\011return c\nend\nlocal function cByte()\n\011local byte = cChar()\n\011return byte and byte:byte() or nil\nend\n--return table of arguments\nlocal function getArgs(msg)\n\011if not msg then return {} end\n\011local args = {}\n\011for word in msg:gmatch(\"([^%s%c]+)\") do\n\011table.insert(args,word)\n\011end\n\011return args\nend\n\n--get different lists for other language keyboards\nlocal keyboardshift = { {before=\" qwertyuiopasdfghjklzxcvbnm1234567890-=.,/`|;'[]\\\\\",after=\" QWERTYUIOPASDFGHJKLZXCVBNM!@#$%^&*()_+><?~\\\\:\\\"{}|\",},{before=\" qwertyuiopasdfghjklzxcvbnm1234567890+,.-'\337\277\337\277\337\277\337\277\337\277\337\277\337\277<\",after=\" QWERTYUIOPASDFGHJKLZXCVBNM!\\\"#\337\277\337\277\337\277\337\245&/()=?;:_*`^>\",}  }\nlocal keyboardaltrg = { {nil},{before=\" qwertyuiopasdfghjklzxcvbnm1234567890+,.-'\337\277\337\277\337\277\337\274\",after=\" qwertyuiopasdfghjklzxcvbnm1@\337\277\337\277\337\277\337\244\337\266{[]}\\\\,.-'~|\",},}\n\nlocal function shift(s)\n\011if keyboardshift[KEYBOARD]~=nil then\n\011\011return (s:gsub(\"(.)\",function(c)return keyboardshift[KEYBOARD][\"after\"]:sub(keyboardshift[KEYBOARD][\"before\"]:find(c,1,true))end))\n\011else return s end\nend\nlocal function altgr(s)\n\011if keyboardaltgr[KEYBOARD]~=nil then\n\011\011return (s:gsub(\"(.)\",function(c)return keyboardaltgr[KEYBOARD][\"after\"]:sub(keyboardaltgr[KEYBOARD][\"before\"]:find(c,1,true))end))\n\011else return s end\nend\n\nlocal ui_base local ui_box local ui_text local ui_button local ui_scrollbar local ui_inputbox local ui_chatbox\nui_base = {\nnew = function()\n\011local b={}\n\011b.drawlist = {}\n\011function b:drawadd(f)\n\011\011table.insert(self.drawlist,f)\n\011end\n\011function b:draw(...)\n\011\011for _,f in ipairs(self.drawlist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,unpack(arg))\n\011\011\011end\n\011\011end\n\011end\n\011b.movelist = {}\n\011function b:moveadd(f)\n\011\011table.insert(self.movelist,f)\n\011end\n\011function b:onmove(x,y)\n\011\011for _,f in ipairs(self.movelist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,x,y)\n\011\011\011end\n\011\011end\n\011end\n\011return b\nend\n}\nui_box = {\nnew = function(x,y,w,h,r,g,b)\n\011local box=ui_base.new()\n\011box.x=x box.y=y box.w=w box.h=h box.x2=x+w box.y2=y+h\n\011box.r=r or 255 box.g=g or 255 box.b=b or 255\n\011function box:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011function box:setbackground(r,g,b,a) self.br=r self.bg=g self.bb=b self.ba=a end\n\011box.drawbox=true\n\011box.drawbackground=false\n\011box:drawadd(function(self) if self.drawbackground then tpt.fillrect(self.x,self.y,self.w,self.h,self.br,self.bg,self.bb,self.ba) end\n\011\011\011\011\011\011\011\011if self.drawbox then tpt.drawrect(self.x,self.y,self.w,self.h,self.r,self.g,self.b) end end)\n\011box:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x self.x2=self.x2+x end\n\011\011if y then self.y=self.y+y self.y2=self.y2+y end\n\011end)\n\011return box\nend\n}\nui_text = {\nnew = function(text,x,y,r,g,b)\n\011local txt = ui_base.new()\n\011txt.text = text\n\011txt.x=x or 0 txt.y=y or 0 txt.r=r or 255 txt.g=g or 255 txt.b=b or 255\n\011function txt:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011txt:drawadd(function(self,x,y) tpt.drawtext(x or self.x,y or self.y,self.text,self.r,self.g,self.b) end)\n\011txt:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function txt:process() return false end\n\011return txt\nend,\n--Scrolls while holding mouse over\nnewscroll = function(text,x,y,vis,force,r,g,b)\n\011local txt = ui_text.new(text,x,y,r,g,b)\n\011if not force and tpt.textwidth(text)<vis then return txt end\n\011txt.visible=vis\n\011txt.length=string.len(text)\n\011txt.start=1\n\011local last=2\n\011while tpt.textwidth(text:sub(1,last))<vis and last<=txt.length do\n\011\011last=last+1\n\011end\n\011txt.last=last-1\n\011txt.minlast=last-1\n\011txt.ppl=((txt.visible-6)/(txt.length-txt.minlast+1))\n\011function txt:update(text,pos)\n\011\011if text then\n\011\011\011self.text=text\n\011\011\011self.length=string.len(text)\n\011\011\011local last=2\n\011\011\011while tpt.textwidth(text:sub(1,last))<self.visible and last<=self.length do\n\011\011\011\011last=last+1\n\011\011\011end\n\011\011\011self.minlast=last-1\n\011\011\011self.ppl=((self.visible-6)/(self.length-self.minlast+1))\n\011\011\011if not pos then self.last=self.minlast end\n\011\011end\n\011\011if pos then\n\011\011\011if pos>=self.last and pos<=self.length then --more than current visible\n\011\011\011\011local newlast = pos\n\011\011\011\011local newstart=1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast\n\011\011\011elseif pos<self.start and pos>0 then --position less than current visible\n\011\011\011\011local newstart=pos\n\011\011\011\011local newlast=pos+1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))<self.visible and newlast<self.length do\n\011\011\011\011\011\011newlast=newlast+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast-1\n\011\011\011end\n\011\011\011--keep strings as long as possible (pulls from left)\n\011\011\011local newlast=self.last\n\011\011\011if newlast<self.minlast then newlast=self.minlast end\n\011\011\011local newstart=1\n\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011end\n\011\011\011self.start=newstart self.last=newlast\n\011\011end\n\011end\n\011txt.drawlist={} --reset draw\n\011txt:drawadd(function(self,x,y)\n\011\011tpt.drawtext(x or self.x,y or self.y, self.text:sub(self.start,self.last) ,self.r,self.g,self.b)\n\011end)\n\011function txt:process(mx,my,button,event,wheel)\n\011\011if event==3 then\n\011\011\011local newlast = math.floor((mx-self.x)/self.ppl)+self.minlast\n\011\011\011if newlast<self.minlast then newlast=self.minlast end\n\011\011\011if newlast>0 and newlast~=self.last then\n\011\011\011\011local newstart=1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast\n\011\011\011end\n\011\011end\n\011end\n\011return txt\nend\n}\nui_inputbox = {\nnew=function(x,y,w,h)\n\011local intext=ui_box.new(x,y,w,h)\n\011intext.cursor=0\n\011intext.line=1\n\011intext.currentline = \"\"\n\011intext.focus=false\n\011intext.t=ui_text.newscroll(\"\",x+2,y+2,w-2,true)\n\011intext.history={}\n\011intext.max_history=200\n\011intext:drawadd(function(self)\n\011\011local cursoradjust=tpt.textwidth(self.t.text:sub(self.t.start,self.cursor))+2\n\011\011tpt.drawline(self.x+cursoradjust,self.y,self.x+cursoradjust,self.y+10,255,255,255)\n\011\011self.t:draw()\n\011end)\n\011intext:moveadd(function(self,x,y) self.t:onmove(x,y) end)\n\011function intext:setfocus(focus)\n\011\011self.focus=focus\n\011\011if focus then tpt.set_shortcuts(0) self:setcolor(255,255,0)\n\011\011else tpt.set_shortcuts(1) self:setcolor(255,255,255) end\n\011end\n\011function intext:movecursor(amt)\n\011\011self.cursor = self.cursor+amt\n\011\011if self.cursor>self.t.length then self.cursor = self.t.length end\n\011\011if self.cursor<0 then self.cursor = 0 return end\n\011end\n\011function intext:addhistory(str)\n\011\011self.history[#self.history+1] = str\n\011\011if #self.history >= self.max_history then\n\011\011\011table.remove(self.history, 1)\n\011\011end\n\011end\n\011function intext:moveline(amt)\n\011\011self.line = self.line+amt\n\011\011local max = #self.currentline and #self.history+2 or #self.history+1\n\011\011if self.line>max then self.line=max\n\011\011elseif self.line<1 then self.line=1 end\n\011\011local history = self.history[self.line] or \"\"\n\011\011if self.line == #self.history+1 then history = self.currentline end\n\011\011self.cursor = string.len(history)\n\011\011self.t:update(history, self.cursor)\n\011end\n\011function intext:textprocess(key,nkey,modifier,event)\n\011\011if event~=1 then return end\n\011\011if not self.focus then\n\011\011\011if nkey==13 then self:setfocus(true) return true end\n\011\011\011return\n\011\011end\n\011\011if nkey==27 then self:setfocus(false) return true end\n\011\011if nkey==13 then local text=self.t.text if text == \"\" then self:setfocus(false) return true else self.cursor=0 self.t.text=\"\" self:addhistory(text) self.line=#self.history+1 self.currentline = \"\" return text end end --enter\n\011\011if nkey==273 then self:moveline(-1) return true end --up\n\011\011if nkey==274 then self:moveline(1) return true end --down\n\011\011if nkey==275 then self:movecursor(1) self.t:update(nil,self.cursor) return true end --right\n\011\011if nkey==276 then self:movecursor(-1) self.t:update(nil,self.cursor) return true end --left\n\011\011local modi = (modifier%1024)\n\011\011local newstr\n\011\011if nkey==8 and self.cursor > 0 then newstr=self.t.text:sub(1,self.cursor-1) .. self.t.text:sub(self.cursor+1) self:movecursor(-1) --back\n\011\011elseif nkey==127 then newstr=self.t.text:sub(1,self.cursor) .. self.t.text:sub(self.cursor+2) --delete\n\011\011elseif nkey==9 then --tab complete\n\011\011\011local nickstart,nickend,nick = self.t.text:sub(1,self.cursor+1):find(\"([^%s%c]+)\"..(self.cursor == #self.t.text and \"\" or \" \")..\"$\")\n\011\011\011if con.members and nick then\n\011\011\011\011for k,v in pairs(con.members) do\n\011\011\011\011\011if v.name:sub(1,#nick) == nick then\n\011\011\011\011\011\011nick = v.name if nickstart == 1 then nick = nick..\":\" end newstr = self.t.text:sub(1,nickstart-1)..nick..\" \"..self.t.text:sub(nickend+1,#self.t.text) self.cursor = nickstart+#nick\n\011\011\011\011\011end\n\011\011\011\011end\n\011\011\011end\n\011\011else\n\011\011\011if nkey<32 or nkey>=127 then return true end --normal key\n\011\011\011local shiftkey = (modi==1 or modi==2)\n\011\011\011if math.floor((modifier%16384)/8192)==1 and key >= 'a' and key <= 'z' then shiftkey = not shiftkey end\n\011\011\011local addkey = shiftkey and shift(key) or key\n\011\011\011if (math.floor(modi/512))==1 then addkey=altgr(key) end\n\011\011\011newstr = self.t.text:sub(1,self.cursor) .. addkey .. self.t.text:sub(self.cursor+1)\n\011\011\011self.currentline = newstr\n\011\011\011self.t:update(newstr,self.cursor+1)\n\011\011\011self:movecursor(1)\n\011\011\011return true\n\011\011end\n\011\011if newstr then\n\011\011\011self.t:update(newstr,self.cursor)\n\011\011end\n\011\011--some actual text processing, lol\n\011end\n\011return intext\nend\n}\nui_scrollbar = {\nnew = function(x,y,h,t,m)\n\011local bar = ui_base.new() --use line object as base?\n\011bar.x=x bar.y=y bar.h=h\n\011bar.total=t\n\011bar.numshown=m\n\011bar.pos=0\n\011bar.length=math.floor((1/math.ceil(bar.total-bar.numshown+1))*bar.h)\n\011bar.soffset=math.floor(bar.pos*((bar.h-bar.length)/(bar.total-bar.numshown)))\n\011function bar:update(total,shown,pos)\n\011\011self.pos=pos or 0\n\011\011if self.pos<0 then self.pos=0 end\n\011\011self.total=total\n\011\011self.numshown=shown\n\011\011self.length= math.floor((1/math.ceil(self.total-self.numshown+1))*self.h)\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011function bar:move(wheel)\n\011\011self.pos = self.pos-wheel\n\011\011if self.pos < 0 then self.pos=0 end\n\011\011if self.pos > (self.total-self.numshown) then self.pos=(self.total-self.numshown) end\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011bar:drawadd(function(self)\n\011\011if self.total > self.numshown then\n\011\011\011tpt.drawline(self.x,self.y+self.soffset,self.x,self.y+self.soffset+self.length)\n\011\011end\n\011end)\n\011bar:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function bar:process(mx,my,button,event,wheel)\n\011\011if wheel~=0 and not hidden_mode then\n\011\011\011if self.total > self.numshown then\n\011\011\011\011local previous = self.pos\n\011\011\011\011self:move(wheel)\n\011\011\011\011if self.pos~=previous then\n\011\011\011\011\011return wheel\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011--possibly click the bar and drag?\n\011\011return false\n\011end\n\011return bar\nend\n}\nui_button = {\nnew = function(x,y,w,h,f,text)\n\011local b = ui_box.new(x,y,w,h)\n\011b.f=f\n\011b.t=ui_text.new(text,x+2,y+2)\n\011b.drawbox=false\n\011b.almostselected=false\n\011b.invert=true\n\011b:drawadd(function(self)\n\011\011if self.invert and self.almostselected then\n\011\011\011self.almostselected=false\n\011\011\011tpt.fillrect(self.x,self.y,self.w,self.h)\n\011\011\011local tr=self.t.r local tg=self.t.g local tb=self.t.b\n\011\011\011b.t:setcolor(0,0,0)\n\011\011\011b.t:draw()\n\011\011\011b.t:setcolor(tr,tg,tb)\n\011\011else\n\011\011\011b.t:draw()\n\011\011end\n\011end)\n\011b:moveadd(function(self,x,y)\n\011\011self.t:onmove(x,y)\n\011end)\n\011function b:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\n\011\011if event==3 then self.almostselected=true end\n\011\011if event==2 then self:f() end\n\011\011return true\n\011end\n\011return b\nend\n}\nui_chatbox = {\nnew=function(x,y,w,h)\n\011local chat=ui_box.new(x,y,w,h)\n\011chat.moving=false\n\011chat.lastx=0\n\011chat.lasty=0\n\011chat.relx=0\n\011chat.rely=0\n\011chat.shown_lines=math.floor(chat.h/10)-2 --one line for top, one for chat\n\011chat.max_width=chat.w-4\n\011chat.max_lines=200\n\011chat.lines = {}\n\011chat.scrollbar = ui_scrollbar.new(chat.x2-2,chat.y+11,chat.h-22,0,chat.shown_lines)\n\011chat.inputbox = ui_inputbox.new(x,chat.y2-10,w,10)\n\011chat.minimize = ui_button.new(chat.x2-15,chat.y,15,10,function() chat.moving=false chat.inputbox:setfocus(false) L.chatHidden=true TPTMP.chatHidden=true end,\">>\")\n\011chat:drawadd(function(self)\n\011\011if self.w > 175 and jacobsmod then\n\011\011\011tpt.drawtext(self.x+self.w/2-tpt.textwidth(\"TPT Multiplayer, by cracker64\")/2,self.y+2,\"TPT Multiplayer, by cracker64\")\n\011\011elseif self.w > 100 then\n\011\011\011tpt.drawtext(self.x+self.w/2-tpt.textwidth(\"TPT Multiplayer\")/2,self.y+2,\"TPT Multiplayer\")\n\011\011end\n\011\011tpt.drawline(self.x+1,self.y+10,self.x2-1,self.y+10,120,120,120)\n\011\011self.scrollbar:draw()\n\011\011local count=0\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011if i>self.scrollbar.pos and i<= self.scrollbar.pos+self.shown_lines then\n\011\011\011\011line:draw(self.x+3,self.y+12+(count*10))\n\011\011\011\011count = count+1\n\011\011\011end\n\011\011end\n\011\011self.inputbox:draw()\n\011\011self.minimize:draw()\n\011end)\n\011chat:moveadd(function(self,x,y)\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011line:onmove(x,y)\n\011\011end\n\011\011self.scrollbar:onmove(x,y)\n\011\011self.inputbox:onmove(x,y)\n\011\011self.minimize:onmove(x,y)\n\011end)\n\011function chat:addline(line,r,g,b,noflash)\n\011\011if not line or line==\"\" then return end --No blank lines\n\011\011local linebreak=0\n\011\011for i=0,#line do\n\011\011\011if tpt.textwidth(line:sub(linebreak,i+1))>self.max_width or i==#line then\n\011\011\011\011table.insert(self.lines,ui_text.new(line:sub(linebreak,i),self.x,0,r,g,b))\n\011\011\011\011linebreak=i+1\n\011\011\011end\n\011\011end\n\011\011while #self.lines>self.max_lines do table.remove(self.lines,1) end\n\011\011self.scrollbar:update(#self.lines,self.shown_lines,#self.lines-self.shown_lines)\n\011\011if L.chatHidden and not noflash then L.flashChat=true end\n\011end\n\011chat:addline(\"TPTMP v\"..versionstring..\": Type '/connect' to join server, or /list for a list of commands.\",200,200,200,true)\n\011function chat:process(mx,my,button,event,wheel)\n\011\011if L.chatHidden then return false end\n\011\011self.minimize:process(mx,my,button,event,wheel)\n\011\011if self.moving and event==3 then\n\011\011\011local newx,newy = mx-self.relx,my-self.rely\n\011\011\011local ax,ay = 0,0\n\011\011\011if newx<0 then ax = newx end\n\011\011\011if newy<0 then ay = newy end\n\011\011\011if (newx+self.w)>=sim.XRES then ax = newx+self.w-sim.XRES end\n\011\011\011if (newy+self.h)>=sim.YRES then ay = newy+self.h-sim.YRES end\n\011\011\011self:onmove(mx-self.lastx-ax,my-self.lasty-ay)\n\011\011\011self.lastx=mx-ax\n\011\011\011self.lasty=my-ay\n\011\011\011return true\n\011\011end\n\011\011local which = math.floor((my-self.y)/10)\n\011\011if self.moving and event==2 then self.moving=false return true end\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then if button == 0 then return false end self.inputbox:setfocus(false) return false elseif event==1 and which ~= 0 and not self.inputbox.focus then self.inputbox:setfocus(true) end\n\011\011self.scrollbar:process(mx,my,button,event,wheel)\n\011\011if event==1 and which==0 then self.moving=true self.lastx=mx self.lasty=my self.relx=mx-self.x self.rely=my-self.y return true end\n\011\011if event==1 and which==self.shown_lines+1 then self.inputbox:setfocus(true) return true elseif self.inputbox.focus then return true end --trigger input_box\n\011\011if which>0 and which<self.shown_lines+1 and self.lines[which+self.scrollbar.pos] then self.lines[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\n\011\011return event==1\n\011end\n\011--commands for chat window\n\011chatcommands = {\n\011connect = function(self,msg,args)\n\011\011if not issocket then self:addline(\"No luasockets found\") return end\n\011\011local newname = pcall(string.dump, get_name) and \"Gue\"..\"st\"..math[\"random\"](1111,9888) or get_name()\n\011\011local s,r = connectToServer(args[1],tonumber(args[2]), newname~=\"\" and newname or username)\n\011\011if not s then self:addline(r,255,50,50) end\n\011\011pressedKeys = nil\n\011end,\n\011send = function(self,msg,args)\n\011\011if tonumber(args[1]) and args[2] then\n\011\011local withNull=false\n\011\011if args[2]==\"true\" then withNull=true end\n\011\011msg = msg:sub(#args[1]+1+(withNull and #args[2]+2 or 0))\n\011\011conSend(tonumber(args[1]),msg,withNull)\n\011\011end\n\011end,\n\011quit = function(self,msg,args)\n\011\011disconnected(\"Disconnected\")\n\011end,\n\011disconnect = function(self,msg,args)\n\011\011disconnected(\"Disconnected\")\n\011end,\n\011join = function(self,msg,args)\n\011\011if args[1] then\n\011\011\011joinChannel(args[1])\n\011\011\011self:addline(\"joined channel \"..args[1],50,255,50)\n\011\011end\n\011end,\n\011sync = function(self,msg,args)\n\011\011if con.connected then L.sendScreen=true end --need to send 67 clear screen\n\011\011self:addline(\"Synced screen to server\",255,255,50)\n\011end,\n\011help = function(self,msg,args)\n\011\011if not args[1] then self:addline(\"/help <command>, type /list for a list of commands\") end\n\011\011if args[1] == \"connect\" then self:addline(\"(/connect [ip] [port]) -- connect to a TPT multiplayer server, or no args to connect to the default one\")\n\011\011--elseif args[1] == \"send\" then self:addline(\"(/send <something> <somethingelse>) -- send raw data to the server\") -- send a raw command\n\011\011elseif args[1] == \"quit\" or args[1] == \"disconnect\" then self:addline(\"(/quit, no arguments) -- quit the game\")\n\011\011elseif args[1] == \"join\" then self:addline(\"(/join <channel> -- joins a room on the server\")\n\011\011elseif args[1] == \"sync\" then self:addline(\"(/sync, no arguments) -- syncs your screen to everyone else in the room\")\n\011\011elseif args[1] == \"me\" then self:addline(\"(/me <message>) -- say something in 3rd person\") -- send a raw command\n\011\011elseif args[1] == \"kick\" then self:addline(\"(/kick <nick> <reason>) -- kick a user, only works if you have been in a channel the longest\")\n\011\011elseif args[1] == \"size\" then self:addline(\"(/size <width> <height>) -- sets the size of the chat window\")\n\011\011end\n\011end,\n\011list = function(self,msg,args)\n\011\011local list = \"\"\n\011\011for name in pairs(chatcommands) do\n\011\011\011list=list..name..\", \"\n\011\011end\n\011\011self:addline(\"Commands: \"..list:sub(1,#list-2))\n\011end,\n\011me = function(self, msg, args)\n\011\011if not con.connected then return end\n\011\011self:addline(\"* \" .. username .. \" \".. table.concat(args, \" \"),200,200,200)\n\011\011conSend(20,table.concat(args, \" \"),true)\n\011end,\n\011kick = function(self, msg, args)\n\011\011if not con.connected then return end\n\011\011if not args[1] then self:addline(\"Need a nick! '/kick <nick> [reason]'\") return end\n\011\011conSend(21, args[1]..\"\\0\"..table.concat(args, \" \", 2),true)\n\011end,\n\011size = function(self, msg, args)\n\011\011if args[2] then\n\011\011\011local w, h = tonumber(args[1]), tonumber(args[2])\n\011\011\011if w < 75 or h < 50 then self:addline(\"size too small\") return\n\011\011\011elseif w > sim.XRES-100 or h > sim.YRES-100 then self:addline(\"size too large\") return\n\011\011\011end\n\011\011\011chatwindow = ui_chatbox.new(100,100,w,h)\n\011\011\011chatwindow:setbackground(10,10,10,235) chatwindow.drawbackground=true\n\011\011\011if using_manager then\n\011\011\011\011MANAGER.savesetting(\"tptmp\", \"width\", w)\n\011\011\011\011MANAGER.savesetting(\"tptmp\", \"height\", h)\n\011\011\011end\n\011\011end\n\011end\n\011}\n\011function chat:textprocess(key,nkey,modifier,event)\n\011\011if L.chatHidden then return nil end\n\011\011local text = self.inputbox:textprocess(key,nkey,modifier,event)\n\011\011if type(text)==\"boolean\" then return text end\n\011\011if text and text~=\"\" then\n\n\011\011\011local cmd = text:match(\"^/([^%s]+)\")\n\011\011\011if cmd then\n\011\011\011\011local msg=text:sub(#cmd+3)\n\011\011\011\011local args = getArgs(msg)\n\011\011\011\011if chatcommands[cmd] then\n\011\011\011\011\011chatcommands[cmd](self,msg,args)\n\011\011\011\011\011--self:addline(\"Executed \"..cmd..\" \"..rest)\n\011\011\011\011\011return\n\011\011\011\011end\n\011\011\011end\n\011\011\011--normal chat\n\011\011\011if con.connected then\n\011\011\011\011conSend(19,text,true)\n\011\011\011\011self:addline(username .. \": \".. text,200,200,200)\n\011\011\011else\n\011\011\011\011self:addline(\"Not connected to server!\",255,50,50)\n\011\011\011end\n\011\011end\n\011end\n\011return chat\nend\n}\nlocal fadeText = {}\n--A little text that fades away, (align text (left/center/right)?)\nlocal function newFadeText(text,frames,x,y,r,g,b,noremove)\n\011local t = {ticks=frames,max=frames,text=text,x=x,y=y,r=r,g=g,b=b,keep=noremove}\n\011t.reset = function(self,text) self.ticks=self.max if text then self.text=text end end\n\011table.insert(fadeText,t)\n\011return t\nend\n--Some text locations for repeated usage\nlocal infoText = newFadeText(\"\",150,245,370,255,255,255,true)\nlocal cmodeText = newFadeText(\"\",120,250,180,255,255,255,true)\n\nlocal showbutton = ui_button.new(613,using_manager and 119 or 136,14,14,function() if using_manager and not MANAGER.hidden then _print(\"minimize the manager before opening TPTMP\") return end if not hooks_enabled then TPTMP.enableMultiplayer() end L.chatHidden=false TPTMP.chatHidden=false L.flashChat=false end,\"<<\")\nif jacobsmod and tpt.oldmenu()~=0 then\n\011showbutton:onmove(0, 256)\nend\nlocal flashCount=0\nshowbutton.drawbox = true showbutton:drawadd(function(self) if L.flashChat then self.almostselected=true flashCount=flashCount+1 if flashCount%25==0 then self.invert=not self.invert end end end)\nif using_manager then\n\011local loadsettings = function() chatwindow = ui_chatbox.new(100, 100, tonumber(MANAGER.getsetting(\"tptmp\", \"width\")), tonumber(MANAGER.getsetting(\"tptmp\", \"height\"))) end\n\011if not pcall(loadsettings) then chatwindow = ui_chatbox.new(100, 100, 225, 150) end\nelse\n\011chatwindow = ui_chatbox.new(100, 100, 225, 150)\nend\nchatwindow:setbackground(10,10,10,235) chatwindow.drawbackground=true\n\nlocal eleNameTable = {\n[\"DEFAULT_PT_LIFE_GOL\"] = 256,[\"DEFAULT_PT_LIFE_HLIF\"] = 257,[\"DEFAULT_PT_LIFE_ASIM\"] = 258,[\"DEFAULT_PT_LIFE_2x2\"] = 259,[\"DEFAULT_PT_LIFE_DANI\"] = 260,\n[\"DEFAULT_PT_LIFE_AMOE\"] = 261,[\"DEFAULT_PT_LIFE_MOVE\"] = 262,[\"DEFAULT_PT_LIFE_PGOL\"] = 263,[\"DEFAULT_PT_LIFE_DMOE\"] = 264,[\"DEFAULT_PT_LIFE_34\"] = 265,\n[\"DEFAULT_PT_LIFE_LLIF\"] = 276,[\"DEFAULT_PT_LIFE_STAN\"] = 267,[\"DEFAULT_PT_LIFE_SEED\"] = 268,[\"DEFAULT_PT_LIFE_MAZE\"] = 269,[\"DEFAULT_PT_LIFE_COAG\"] = 270,\n[\"DEFAULT_PT_LIFE_WALL\"] = 271,[\"DEFAULT_PT_LIFE_GNAR\"] = 272,[\"DEFAULT_PT_LIFE_REPL\"] = 273,[\"DEFAULT_PT_LIFE_MYST\"] = 274,[\"DEFAULT_PT_LIFE_LOTE\"] = 275,\n[\"DEFAULT_PT_LIFE_FRG2\"] = 276,[\"DEFAULT_PT_LIFE_STAR\"] = 277,[\"DEFAULT_PT_LIFE_FROG\"] = 278,[\"DEFAULT_PT_LIFE_BRAN\"] = 279,\n[\"DEFAULT_WL_0\"] = 280,[\"DEFAULT_WL_1\"] = 281,[\"DEFAULT_WL_2\"] = 282,[\"DEFAULT_WL_3\"] = 283,[\"DEFAULT_WL_4\"] = 284,\n[\"DEFAULT_WL_5\"] = 285,[\"DEFAULT_WL_6\"] = 286,[\"DEFAULT_WL_7\"] = 287,[\"DEFAULT_WL_8\"] = 288,[\"DEFAULT_WL_9\"] = 289,[\"DEFAULT_WL_10\"] = 290,\n[\"DEFAULT_WL_11\"] = 291,[\"DEFAULT_WL_12\"] = 292,[\"DEFAULT_WL_13\"] = 293,[\"DEFAULT_WL_14\"] = 294,[\"DEFAULT_WL_15\"] = 295,\n[\"DEFAULT_UI_SAMPLE\"] = 296,[\"DEFAULT_UI_SIGN\"] = 297,[\"DEFAULT_UI_PROPERTY\"] = 298,[\"DEFAULT_UI_WIND\"] = 299,\n[\"DEFAULT_TOOL_HEAT\"] = 300,[\"DEFAULT_TOOL_COOL\"] = 301,[\"DEFAULT_TOOL_VAC\"] = 302,[\"DEFAULT_TOOL_AIR\"] = 303,[\"DEFAULT_TOOL_PGRV\"] = 304,[\"DEFAULT_TOOL_NGRV\"] = 305,\n[\"DEFAULT_DECOR_SET\"] = 306,[\"DEFAULT_DECOR_ADD\"] = 307,[\"DEFAULT_DECOR_SUB\"] = 308,[\"DEFAULT_DECOR_MUL\"] = 309,[\"DEFAULT_DECOR_DIV\"] = 310,[\"DEFAULT_DECOR_SMDG\"] = 311,[\"DEFAULT_DECOR_CLR\"] = 312,[\"DEFAULT_DECOR_LIGH\"] = 313, [\"DEFAULT_DECOR_DARK\"] = 314\n}\nlocal function convertDecoTool(c)\n\011return c\nend\nif jacobsmod then\n\011function convertDecoTool(c)\n\011\011if c >= 307 and c <= 311 then\n\011\011\011c = c + 1\n\011\011elseif c == 312 then\n\011\011\011c = 307\n\011\011end\n\011\011return c\n\011end\n\011local modNameTable = {\n\011[\"DEFAULT_WL_ERASE\"] = 280,[\"DEFAULT_WL_CNDTW\"] = 281,[\"DEFAULT_WL_EWALL\"] = 282,[\"DEFAULT_WL_DTECT\"] = 283,[\"DEFAULT_WL_STRM\"] = 284,\n\011[\"DEFAULT_WL_FAN\"] = 285,[\"DEFAULT_WL_LIQD\"] = 286,[\"DEFAULT_WL_ABSRB\"] = 287,[\"DEFAULT_WL_WALL\"] = 288,[\"DEFAULT_WL_AIR\"] = 289,[\"DEFAULT_WL_POWDR\"] = 290,\n\011[\"DEFAULT_WL_CNDTR\"] = 291,[\"DEFAULT_WL_EHOLE\"] = 292,[\"DEFAULT_WL_GAS\"] = 293,[\"DEFAULT_WL_GRVTY\"] = 294,[\"DEFAULT_WL_ENRGY\"] = 295,[\"DEFAULT_WL_ERASEA\"] = 280\n\011}\n\011for k,v in pairs(modNameTable) do\n\011\011eleNameTable[k] = v\n\011end\nend\nlocal gravList= {[0]=\"Vertical\",[1]=\"Off\",[2]=\"Radial\"}\nlocal airList= {[0]=\"On\",[1]=\"Pressure Off\",[2]=\"Velocity Off\",[3]=\"Off\",[4]=\"No Update\"}\nlocal noFlood = {[15]=true,[55]=true,[87]=true,[128]=true,[158]=true}\nlocal noShape = {[55]=true,[87]=true,[128]=true,[158]=true}\nlocal createOverride = {[55]=function(x,y,rx,ry,c,brush) sim.createParts(x,y,0,0,c,brush) end ,[87]=function(x,y,rx,ry,c,brush) sim.createParts(x,y,0,0,c,brush) end,[128]=function(x,y,rx,ry,c,brush) sim.createParts(x,y,0,0,c,brush) end,[158]=function(x,y,rx,ry,c,brush) sim.createParts(x,y,0,0,c,brush) end}\nlocal golStart,golEnd=256,279\nlocal wallStart,wallEnd=280,295\nlocal toolStart,toolEnd=300,305\nlocal decoStart,decoEnd=306,314\n\n--Functions that do stuff in powdertoy\nlocal function createBoxAny(x1,y1,x2,y2,c,user)\n\011if noShape[c] then return end\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011sim.createWallBox(x1,y1,x2,y2,c-wallStart)\n\011\011elseif c<=toolEnd then\n\011\011\011if c>=toolStart then sim.toolBox(x1,y1,x2,y2,c-toolStart) end\n\011\011elseif c<= decoEnd then\n\011\011\011sim.decoBox(x1,y1,x2,y2,user.dcolour[2],user.dcolour[3],user.dcolour[4],user.dcolour[1],convertDecoTool(c)-decoStart)\n\011\011end\n\011\011return\n\011elseif c>=golStart then\n\011\011c = 78+(c-golStart)*256\n\011end\n\011sim.createBox(x1,y1,x2,y2,c,user and user.replacemode)\nend\nlocal function createPartsAny(x,y,rx,ry,c,brush,user)\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011if c == 284 then rx,ry = 0,0 end\n\011\011\011sim.createWalls(x,y,rx,ry,c-wallStart,brush)\n\011\011elseif c<=toolEnd then\n\011\011\011if c>=toolStart then sim.toolBrush(x,y,rx,ry,c-toolStart,brush) end\n\011\011elseif c<= decoEnd then\n\011\011\011sim.decoBrush(x,y,rx,ry,user.dcolour[2],user.dcolour[3],user.dcolour[4],user.dcolour[1],convertDecoTool(c)-decoStart,brush)\n\011\011end\n\011\011return\n\011elseif c>=golStart then\n\011\011c = 78+(c-golStart)*256\n\011end\n\011if createOverride[c] then createOverride[c](x,y,rx,ry,c,brush) return end\n\011sim.createParts(x,y,rx,ry,c,brush,user.replacemode)\nend\nlocal function createLineAny(x1,y1,x2,y2,rx,ry,c,brush,user)\n\011if noShape[c] then return end\n\011if jacobsmod and c == tpt.element(\"ball\") and not user.shift then return end\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011if c == 284 then rx,ry = 0,0 end\n\011\011\011sim.createWallLine(x1,y1,x2,y2,rx,ry,c-wallStart,brush)\n\011\011elseif c<=toolEnd then\n\011\011\011if c>=toolStart then local str=1.0 if user.drawtype==4 then if user.shift then str=10.0 elseif user.alt then str=0.1 end end sim.toolLine(x1,y1,x2,y2,rx,ry,c-toolStart,brush,str) end\n\011\011elseif c<= decoEnd then\n\011\011\011sim.decoLine(x1,y1,x2,y2,rx,ry,user.dcolour[2],user.dcolour[3],user.dcolour[4],user.dcolour[1],convertDecoTool(c)-decoStart,brush)\n\011\011end\n\011\011return\n\011elseif c>=golStart then\n\011\011c = 78+(c-golStart)*256\n\011end\n\011sim.createLine(x1,y1,x2,y2,rx,ry,c,brush,user.replacemode)\nend\nlocal function floodAny(x,y,c,cm,bm,user)\n\011if noFlood[c] then return end\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011sim.floodWalls(x,y,c-wallStart,bm)\n\011\011end\n\011\011--other tools shouldn't flood\n\011\011return\n\011elseif c>=golStart then --GoL adjust\n\011\011c = 78+(c-golStart)*256\n\011end\n\011sim.floodParts(x,y,c,cm,user.replacemode)\nend\nlocal function lineSnapCoords(x1,y1,x2,y2)\n\011local nx,ny\n\011local snapAngle = math.floor(math.atan2(y2-y1, x2-x1)/(math.pi*0.25)+0.5)*math.pi*0.25;\n\011local lineMag = math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2));\n\011nx = math.floor(lineMag*math.cos(snapAngle)+x1+0.5);\n\011ny = math.floor(lineMag*math.sin(snapAngle)+y1+0.5);\n\011return nx,ny\nend\n\nlocal function rectSnapCoords(x1,y1,x2,y2)\n\011local nx,ny\n\011local snapAngle = math.floor((math.atan2(y2-y1, x2-x1)+math.pi*0.25)/(math.pi*0.5)+0.5)*math.pi*0.5 - math.pi*0.25;\n\011local lineMag = math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2));\n\011nx = math.floor(lineMag*math.cos(snapAngle)+x1+0.5);\n\011ny = math.floor(lineMag*math.sin(snapAngle)+y1+0.5);\n\011return nx,ny\nend\nlocal renModes = {[0xff00f270]=1,[-16715152]=1,[0x0400f381]=2,[0xf382]=4,[0xf388]=8,[0xf384]=16,[0xfff380]=32,[1]=0xff00f270,[2]=0x0400f381,[4]=0xf382,[8]=0xf388,[16]=0xf384,[32]=0xfff380}\nlocal function getViewModes()\n\011local t={0,0,0}\n\011for k,v in pairs(ren.displayModes()) do\n\011\011t[1] = t[1]+v\n\011end\n\011for k,v in pairs(ren.renderModes()) do\n\011\011t[2] = t[2]+(renModes[v] or 0)\n\011end\n\011t[3] = ren.colorMode()\n\011return t\nend\n\n--clicky click\nlocal function playerMouseClick(id,btn,ev)\n\011local user = con.members[id]\n\011local createE, checkBut\n\n\011--_print(tostring(btn)..tostring(ev))\n\011if ev==0 then return end\n\011if btn==1 then\n\011\011user.rbtn,user.abtn = false,false\n\011\011createE,checkBut=user.selectedl,user.lbtn\n\011elseif btn==2 then\n\011\011user.rbtn,user.lbtn = false,false\n\011\011createE,checkBut=user.selecteda,user.abtn\n\011elseif btn==4 then\n\011\011user.lbtn,user.abtn = false,false\n\011\011createE,checkBut=user.selectedr,user.rbtn\n\011else return end\n\n\011if user.mousex>=sim.XRES or user.mousey>=sim.YRES then user.drawtype=false return end\n\n\011if ev==1 then\n\011\011user.pmx,user.pmy = user.mousex,user.mousey\n\011\011if not user.drawtype then\n\011\011\011--left box\n\011\011\011if user.ctrl and not user.shift then user.drawtype = 2 return end\n\011\011\011--left line\n\011\011\011if user.shift and not user.ctrl then user.drawtype = 1 return end\n\011\011\011--floodfill\n\011\011\011if user.ctrl and user.shift then floodAny(user.mousex,user.mousey,createE,-1,-1,user) user.drawtype = 3 return end\n\011\011\011--an alt click\n\011\011\011if user.alt then return end\n\011\011\011user.drawtype=4 --normal hold\n\011\011end\n\011\011createPartsAny(user.mousex,user.mousey,user.brushx,user.brushy,createE,user.brush,user)\n\011elseif ev==2 and checkBut and user.drawtype then\n\011\011if user.drawtype==2 then\n\011\011\011if user.alt then user.mousex,user.mousey = rectSnapCoords(user.pmx,user.pmy,user.mousex,user.mousey) end\n\011\011\011createBoxAny(user.mousex,user.mousey,user.pmx,user.pmy,createE,user)\n\011\011else\n\011\011\011if user.alt then user.mousex,user.mousey = lineSnapCoords(user.pmx,user.pmy,user.mousex,user.mousey) end\n\011\011\011createLineAny(user.mousex,user.mousey,user.pmx,user.pmy,user.brushx,user.brushy,createE,user.brush,user)\n\011\011end\n\011\011user.drawtype=false\n\011\011user.pmx,user.pmy = user.mousex,user.mousey\n\011end\nend\n--To draw continued lines\nlocal function playerMouseMove(id)\n\011local user = con.members[id]\n\011local createE, checkBut\n\011if user.lbtn then\n\011\011createE,checkBut=user.selectedl,user.lbtn\n\011elseif user.rbtn then\n\011\011createE,checkBut=user.selectedr,user.rbtn\n\011elseif user.abtn then\n\011\011createE,checkBut=user.selecteda,user.abtn\n\011else return end\n\011if user.drawtype~=4 then if user.drawtype==3 then floodAny(user.mousex,user.mousey,createE,-1,-1,user) end return end\n\011if checkBut==3 then\n\011\011if user.mousex>=sim.XRES then user.mousex=sim.XRES-1 end\n\011\011if user.mousey>=sim.YRES then user.mousey=sim.YRES-1 end\n\011\011createLineAny(user.mousex,user.mousey,user.pmx,user.pmy,user.brushx,user.brushy,createE,user.brush,user)\n\011\011user.pmx,user.pmy = user.mousex,user.mousey\n\011end\nend\nlocal function loadStamp(size,x,y,reset)\n\011con.socket:settimeout(10)\n\011local s = con.socket:receive(size)\n\011con.socket:settimeout(0)\n\011if s then\n\011\011local f = io.open(\".tmp.stm\",\"wb\")\n\011\011f:write(s)\n\011\011f:close()\n\011\011if reset then sim.clearSim() end\n\011\011if not sim.loadStamp(\".tmp.stm\",x,y) then\n\011\011\011infoText:reset(\"Error loading stamp\")\n\011\011end\n\011\011os.remove\".tmp.stm\"\n\011else\n\011\011infoText:reset(\"Error loading empty stamp\")\n\011end\nend\nlocal function saveStamp(x, y, w, h)\n\011local stampName = sim.saveStamp(x, y, w, h) or \"errorsavingstamp\"\n\011local fullName = \"stamps/\"..stampName..\".stm\"\n\011return stampName, fullName\nend\nlocal function deleteStamp(name)\n\011if sim.deleteStamp then\n\011\011sim.deleteStamp(name)\n\011else\n\011\011os.remove(\"stamps/\"..name..\".stm\")\n\011end\nend\n\nlocal dataCmds = {\n\011[16] = function()\n\011--room members\n\011\011con.members = {}\n\011\011local amount = cByte()\n\011\011local peeps = {}\n\011\011for i=1,amount do\n\011\011\011local id = cByte()\n\011\011\011con.members[id]={name=conGetNull(),mousex=0,mousey=0,brushx=4,brushy=4,brush=0,selectedl=1,selectedr=0,selecteda=296,replacemode=0,dcolour={0,0,0,0},lbtn=false,abtn=false,rbtn=false,ctrl=false,shift=false,alt=false}\n\011\011\011local name = con.members[id].name\n\011\011\011table.insert(peeps,name)\n\011\011end\n\011\011chatwindow:addline(\"Online: \"..table.concat(peeps,\" \"),255,255,50)\n\011end,\n\011[17]= function()\n\011\011local id = cByte()\n\011\011con.members[id] ={name=conGetNull(),mousex=0,mousey=0,brushx=4,brushy=4,brush=0,selectedl=1,selectedr=0,selecteda=296,replacemode=0,dcolour={0,0,0,0},lbtn=false,abtn=false,rbtn=false,ctrl=false,shift=false,alt=false}\n\011\011chatwindow:addline(con.members[id].name..\" has joined\",100,255,100)\n\011end,\n\011[18] = function()\n\011\011local id = cByte()\n\011\011chatwindow:addline(con.members[id].name..\" has left\",255,255,100)\n\011\011con.members[id]=nil\n\011end,\n\011[19] = function()\n\011\011chatwindow:addline(con.members[cByte()].name .. \": \" .. conGetNull())\n\011end,\n\011[20] = function()\n\011\011chatwindow:addline(\"* \"..con.members[cByte()].name .. \" \" .. conGetNull())\n\011end,\n\011[22] = function()\n\011\011chatwindow:addline(\"[SERVER] \"..conGetNull(), cByte(), cByte(), cByte())\n\011end,\n\011--Mouse Position\n\011[32] = function()\n\011\011local id = cByte()\n\011\011local b1,b2,b3=cByte(),cByte(),cByte()\n\011\011con.members[id].mousex,con.members[id].mousey=((b1*16)+math.floor(b2/16)),((b2%16)*256)+b3\n\011\011playerMouseMove(id)\n\011end,\n\011--Mouse Click\n\011[33] = function()\n\011\011local id = cByte()\n\011\011local d=cByte()\n\011\011local btn,ev=math.floor(d/16),d%16\n\011\011playerMouseClick(id,btn,ev)\n\011\011if ev==0 then return end\n\011\011if btn==1 then\n\011\011\011con.members[id].lbtn=ev\n\011\011elseif btn==2 then\n\011\011\011con.members[id].abtn=ev\n\011\011elseif btn==4 then\n\011\011\011con.members[id].rbtn=ev\n\011\011end\n\011end,\n\011--Brush size\n\011[34] = function()\n\011\011local id = cByte()\n\011\011con.members[id].brushx,con.members[id].brushy=cByte(),cByte()\n\011end,\n\011--Brush Shape change, no args\n\011[35] = function()\n\011\011local id = cByte()\n\011\011con.members[id].brush=(con.members[id].brush+1)%3\n\011end,\n\011--Modifier (mod and state)\n\011[36] = function()\n\011\011local id = cByte()\n\011\011local d=cByte()\n\011\011local mod,state=math.floor(d/16),d%16~=0\n\011\011if mod==0 then\n\011\011\011con.members[id].ctrl=state\n\011\011elseif mod==1 then\n\011\011\011con.members[id].shift=state\n\011\011elseif mod==2 then\n\011\011\011con.members[id].alt=state\n\011\011end\n\011end,\n\011--selected elements (2 bits button, 14-element)\n\011[37] = function()\n\011\011local id = cByte()\n\011\011local b1,b2=cByte(),cByte()\n\011\011local btn,el=math.floor(b1/64),(b1%64)*256+b2\n\011\011if btn==0 then\n\011\011\011con.members[id].selectedl=el\n\011\011elseif btn==1 then\n\011\011\011con.members[id].selecteda=el\n\011\011elseif btn==2 then\n\011\011\011con.members[id].selectedr=el\n\011\011elseif btn==3 then\n\011\011\011--sync replace mode element between all players since apparently you have to set tpt.selectedreplace to use replace mode ...\n\011\011\011tpt.selectedreplace = elem.property(el, \"Identifier\")\n\011\011end\n\011end,\n\011--replace mode / specific delete\n\011[38] = function()\n\011\011local id = cByte()\n\011\011local mod = cByte()\n\011\011con.members[id].replacemode = mod\n\011end,\n\011--cmode defaults (1 byte mode)\n\011[48] = function()\n\011\011local id = cByte()\n\011\011tpt.display_mode(cByte())\n\011\011cmodeText:reset(con.members[id].name..\" set:\")\n\011end,\n\011--pause set (1 byte state)\n\011[49] = function()\n\011\011local id = cByte()\n\011\011local p,str = cByte(),\"Pause\"\n\011\011tpt.set_pause(p)\n\011\011if p==0 then str=\"Unpause\" end\n\011\011infoText:reset(str..\" from \"..con.members[id].name)\n\011end,\n\011--step frame, no args\n\011[50] = function()\n\011\011local id = cByte()\n\011\011tpt.set_pause(0)\n\011\011L.pauseNextFrame=true\n\011end,\n\n\011--deco mode, (1 byte state)\n\011[51] = function()\n\011\011local id = cByte()\n\011\011tpt.decorations_enable(cByte())\n\011\011cmodeText:reset(con.members[id].name..\" set:\")\n\011end,\n\011--[[HUD mode, (1 byte state), deprecated\n\011[52] = function()\n\011\011local id = cByte()\n\011\011local hstate = cByte()\n\011\011tpt.hud(hstate)\n\011end,\n\011--]]\n\011--amb heat mode, (1 byte state)\n\011[53] = function()\n\011\011local id = cByte()\n\011\011tpt.ambient_heat(cByte())\n\011end,\n\011--newt_grav mode, (1 byte state)\n\011[54] = function()\n\011\011local id = cByte()\n\011\011tpt.newtonian_gravity(cByte())\n\011end,\n\n\011--[[\n\011--debug mode (1 byte state?) can't implement\n\011[55] = function()\n\011\011local id = cByte()\n\011\011--local dstate = cByte()\n\011\011tpt.setdebug()\n\011end,\n\011--]]\n\011--legacy heat mode, (1 byte state)\n\011[56] = function()\n\011\011local id = cByte()\n\011\011tpt.heat(cByte())\n\011end,\n\011--water equal, (1 byte state)\n\011[57] = function()\n\011\011local id = cByte()\n\011\011sim.waterEqualisation(cByte())\n\011end,\n\n\011--grav mode, (1 byte state)\n\011[58] = function()\n\011\011local id = cByte()\n\011\011local mode = cByte()\n\011\011sim.gravityMode(mode)\n\011\011cmodeText:reset(con.members[id].name..\" set: Gravity: \"..gravList[mode])\n\011end,\n\011--air mode, (1 byte state)\n\011[59] = function()\n\011\011local id = cByte()\n\011\011local mode=cByte()\n\011\011sim.airMode(mode)\n\011\011cmodeText:reset(con.members[id].name..\" set: Air: \"..airList[mode])\n\011end,\n\n\011--clear sparks (no args)\n\011[60] = function()\n\011\011local id = cByte()\n\011\011tpt.reset_spark()\n\011end,\n\011--clear pressure/vel (no args)\n\011[61] = function()\n\011\011local id = cByte()\n\011\011tpt.reset_velocity()\n\011\011tpt.set_pressure()\n\011end,\n\011--invert pressure (no args)\n\011[62] = function()\n\011\011local id = cByte()\n\011\011for x=0,152 do\n\011\011\011for y=0,95 do\n\011\011\011\011sim.pressure(x,y,-sim.pressure(x,y))\n\011\011\011end\n\011\011end\n\011end,\n\011--Clearsim button (no args)\n\011[63] = function()\n\011\011local id = cByte()\n\011\011sim.clearSim()\n\011\011L.lastSave=nil\n\011\011infoText:reset(con.members[id].name..\" cleared the screen\")\n\011end,\n\011--Full graphics view mode (for manual changes in display menu) (3 bytes)\n\011[64] = function()\n\011\011local id = cByte()\n\011\011local disM,renM,colM = cByte(),cByte(),cByte()\n\011\011ren.displayModes({disM})\n\011\011local t,i={},1\n\011\011while i<=32 do\n\011\011\011if bit.band(renM,i)>0 then table.insert(t,renModes[i]) end\n\011\011\011i=i*2\n\011\011end\n\011\011ren.renderModes(t)\n\011\011ren.colorMode(colM)\n\011end,\n\011--Selected deco colour (4 bytes)\n\011[65] = function()\n\011\011local id = cByte()\n\011\011con.members[id].dcolour = {cByte(),cByte(),cByte(),cByte()}\n\011end,\n\011--Recieve a stamp, with location (6 bytes location(3),size(3))\n\011[66] = function()\n\011\011local id = cByte()\n\011\011local b1,b2,b3=cByte(),cByte(),cByte()\n\011\011local x,y =((b1*16)+math.floor(b2/16)),((b2%16)*256)+b3\n\011\011local d = cByte()*65536+cByte()*256+cByte()\n\011\011loadStamp(d,x,y,false)\n\011\011infoText:reset(\"Stamp from \"..con.members[id].name)\n\011end,\n\011--Clear an area, helper for cut (6 bytes, start(3), end(3))\n\011[67] = function()\n\011\011local id = cByte()\n\011\011local b1,b2,b3,b4,b5,b6=cByte(),cByte(),cByte(),cByte(),cByte(),cByte()\n\011\011local x1,y1 =((b1*16)+math.floor(b2/16)),((b2%16)*256)+b3\n\011\011local x2,y2 =((b4*16)+math.floor(b5/16)),((b5%16)*256)+b6\n\011\011--clear walls and parts\n\011\011createBoxAny(x1,y1,x2,y2,280)\n\011\011createBoxAny(x1,y1,x2,y2,0)\n\011end,\n\011--Edge mode (1 byte state)\n\011[68] = function()\n\011\011local id = cByte()\n\011\011sim.edgeMode(cByte())\n\011end,\n\011--Load a save ID (3 bytes ID)\n\011[69] = function()\n\011\011local id = cByte()\n\011\011local saveID = cByte()*65536+cByte()*256+cByte()\n\011\011L.lastSave=saveID\n\011\011sim.loadSave(saveID,1)\n\011\011L.browseMode=3\n\011end,\n\011--Reload sim(from a stamp right now, no args)\n\011[70] = function()\n\011\011local id = cByte()\n\011\011sim.clearSim()\n\011\011if not sim.loadStamp(\"stamps/tmp.stm\",0,0) then\n\011\011\011infoText:reset(\"Error reloading save from \"..con.members[id].name)\n\011\011end\n\011end,\n\011--A request to sync a player, from server, send screen, and various settings\n\011[128] = function()\n\011\011local id = cByte()\n\011\011conSend(130,string.char(id,49,tpt.set_pause()))\n\011\011local stampName,fullName = saveStamp(0,0,sim.XRES-1,sim.YRES-1)\n\011\011local f = assert(io.open(fullName,\"rb\"))\n\011\011local s = f:read\"*a\"\n\011\011f:close()\n\011\011deleteStamp(stampName)\n\011\011local d = #s\n\011\011conSend(128,string.char(id,math.floor(d/65536),math.floor(d/256)%256,d%256)..s)\n\011\011conSend(130,string.char(id,53,tpt.ambient_heat()))\n\011\011conSend(130,string.char(id,54,tpt.newtonian_gravity()))\n\011\011conSend(130,string.char(id,56,tpt.heat()))\n\011\011conSend(130,string.char(id,57,sim.waterEqualisation()))\n\011\011conSend(130,string.char(id,58,sim.gravityMode()))\n\011\011conSend(130,string.char(id,59,sim.airMode()))\n\011\011conSend(130,string.char(id,68,sim.edgeMode()))\n\011\011conSend(64,string.char(unpack(getViewModes())))\n\011\011conSend(34,string.char(tpt.brushx,tpt.brushy))\n\011end,\n\011--Recieve sync stamp\n\011[129] = function()\n\011\011local d = cByte()*65536+cByte()*256+cByte()\n\011\011loadStamp(d,0,0,true)\n\011end,\n}\n\nlocal function connectThink()\n\011if not con.connected then return end\n\011if not con.socket then disconnected() return end\n\011--read all messages\n\011while 1 do\n\011\011local s,r = con.socket:receive(1)\n\011\011if s then\n\011\011\011local cmd = string.byte(s)\n\011\011\011--_print(\"GOT \"..tostring(cmd))\n\011\011\011if dataCmds[cmd] then dataCmds[cmd]() else _print(\"TPTMP: Unknown protocol \"..tostring(cmd),255,20,20) end\n\011\011else\n\011\011\011if r ~= \"timeout\" then disconnected() end\n\011\011\011break\n\011\011end\n\011end\n\n\011--ping every minute\n\011if os.time()>con.pingTime then conSend(2) con.pingTime=os.time()+60 end\nend\n--Track if we have STKM2 out, for WASD key changes\nelements.property(128,\"Update\",function() L.stick2=true end)\n\nlocal function drawStuff()\n\011if con.members then\n\011\011for i,user in pairs(con.members) do\n\011\011\011local x,y = user.mousex,user.mousey\n\011\011\011local brx,bry=user.brushx,user.brushy\n\011\011\011local brush,drawBrush=user.brush,true\n\011\011\011gfx.drawText(x,y,(\"%s %dx%d\"):format(user.name,brx,bry),0,255,0,192)\n\011\011\011if user.drawtype then\n\011\011\011\011if user.drawtype==1 then\n\011\011\011\011\011if user.alt then x,y = lineSnapCoords(user.pmx,user.pmy,x,y) end\n\011\011\011\011\011tpt.drawline(user.pmx,user.pmy,x,y,0,255,0,128)\n\011\011\011\011elseif user.drawtype==2 then\n\011\011\011\011\011if user.alt then x,y = rectSnapCoords(user.pmx,user.pmy,x,y) end\n\011\011\011\011\011local tpmx,tpmy = user.pmx,user.pmy\n\011\011\011\011\011if tpmx>x then tpmx,x=x,tpmx end\n\011\011\011\011\011if tpmy>y then tpmy,y=y,tpmy end\n\011\011\011\011\011tpt.drawrect(tpmx,tpmy,x-tpmx,y-tpmy,0,255,0,128)\n\011\011\011\011\011drawBrush=false\n\011\011\011\011elseif user.drawtype==3 then\n\011\011\011\011\011tpt.drawline(x,y,x+5,y,0,255,0,128)\n\011\011\011\011\011tpt.drawline(x,y,x-5,y,0,255,0,128)\n\011\011\011\011\011tpt.drawline(x,y,x,y+5,0,255,0,128)\n\011\011\011\011\011tpt.drawline(x,y,x,y-5,0,255,0,128)\n\011\011\011\011\011drawBrush=false\n\011\011\011\011end\n\011\011\011end\n\011\011\011if drawBrush then\n\011\011\011\011if brush==0 then\n\011\011\011\011\011gfx.drawCircle(x,y,brx,bry,0,255,0,128)\n\011\011\011\011elseif brush==1 then\n\011\011\011\011\011gfx.drawRect(x-brx,y-bry,brx*2+1,bry*2+1,0,255,0,128)\n\011\011\011\011elseif brush==2 then\n\011\011\011\011\011gfx.drawLine(x-brx,y+bry,x,y-bry,0,255,0,128)\n\011\011\011\011\011gfx.drawLine(x-brx,y+bry,x+brx,y+bry,0,255,0,128)\n\011\011\011\011\011gfx.drawLine(x,y-bry,x+brx,y+bry,0,255,0,128)\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\n\011for k,v in pairs(fadeText) do\n\011\011if v.ticks > 0 then\n\011\011\011local a = math.floor(255*(v.ticks/v.max))\n\011\011\011tpt.drawtext(v.x,v.y,v.text,v.r,v.g,v.b,a)\n\011\011\011v.ticks = v.ticks-1\n\011\011else if not v.keep then table.remove(fadeText,k) end\n\011\011end\n\011end\nend\n\nlocal function sendStuff()\n\011if not con.connected then return end\n\011--mouse position every frame, not exactly needed, might be better/more accurate from clicks\n\011local nmx,nmy = tpt.mousex,tpt.mousey\n\011if nmx<sim.XRES and nmy<sim.YRES then nmx,nmy = sim.adjustCoords(nmx,nmy) end\n\011if L.mousex~= nmx or L.mousey~= nmy then\n\011\011L.mousex,L.mousey = nmx,nmy\n\011\011local b1,b2,b3 = math.floor(L.mousex/16),((L.mousex%16)*16)+math.floor(L.mousey/256),(L.mousey%256)\n\011\011conSend(32,string.char(b1,b2,b3))\n\011end\n\011if tpt.brushx > 255 then tpt.brushx = 255 end\n\011if tpt.brushy > 255 then tpt.brushy = 255 end\n\011local nbx,nby = tpt.brushx,tpt.brushy\n\011if L.brushx~=nbx or L.brushy~=nby then\n\011\011L.brushx,L.brushy = nbx,nby\n\011\011conSend(34,string.char(L.brushx,L.brushy))\n\011end\n\011--check selected elements\n\011local nsell,nsela,nselr,nselrep = elements[tpt.selectedl] or eleNameTable[tpt.selectedl],elements[tpt.selecteda] or eleNameTable[tpt.selecteda],elements[tpt.selectedr] or eleNameTable[tpt.selectedr],elements[tpt.selectedreplace] or eleNameTable[tpt.selectedreplace]\n\011if L.sell~=nsell then\n\011\011L.sell=nsell\n\011\011conSend(37,string.char(math.floor(L.sell/256),L.sell%256))\n\011elseif L.sela~=nsela then\n\011\011L.sela=nsela\n\011\011conSend(37,string.char(math.floor(64 + L.sela/256),L.sela%256))\n\011elseif L.selr~=nselr then\n\011\011L.selr=nselr\n\011\011conSend(37,string.char(math.floor(128 + L.selr/256),L.selr%256))\n\011elseif L.selrep~=nselrep then\n\011\011L.selrep=nselrep\n\011\011conSend(37,string.char(math.floor(192 + L.selrep/256),L.selrep%256))\n\011end\n\011local ncol = sim.decoColour()\n\011if L.dcolour~=ncol then\n\011\011L.dcolour=ncol\n\011\011conSend(65,string.char(math.floor(ncol/16777216),math.floor(ncol/65536)%256,math.floor(ncol/256)%256,ncol%256))\n\011end\n\n\011--Tell others to open this save ID, or send screen if opened local browser\n\011if jacobsmod and L.browseMode and L.browseMode > 3 then\n\011\011--hacky hack\n\011\011L.browseMode = L.browseMode - 3\n\011elseif L.browseMode==1 then\n\011\011--loaded online save\n\011\011local id=sim.getSaveID()\n\011\011if L.lastSave~=id then\n\011\011\011L.lastSave=id\n\011\011\011--save a backup for the reload button\n\011\011\011local stampName,fullName = saveStamp(0,0,sim.XRES-1,sim.YRES-1)\n\011\011\011os.remove(\"stamps/tmp.stm\") os.rename(fullName,\"stamps/tmp.stm\")\n\011\011\011conSend(69,string.char(math.floor(id/65536),math.floor(id/256)%256,id%256))\n\011\011\011deleteStamp(stampName)\n\011\011end\n\011\011L.browseMode=nil\n\011elseif L.browseMode==2 then\n\011\011--loaded local save (should probably clear sim first instead?)\n\011\011L.sendScreen=true\n\011\011L.browseMode=nil\n\011elseif L.browseMode==3 and L.lastSave==sim.getSaveID() then\n\011\011L.browseMode=nil\n\011\011--save this as a stamp for reloading (unless an api function exists to do this)\n\011\011local stampName,fullName = saveStamp(0,0,sim.XRES-1,sim.YRES-1)\n\011\011os.remove(\"stamps/tmp.stm\") os.rename(fullName,\"stamps/tmp.stm\")\n\011\011deleteStamp(stampName)\n\011end\n\n\011--Send screen (or an area for known size) for stamps\n\011if jacobsmod and L.sendScreen == 2 then\n\011\011L.sendScreen = true\n\011elseif L.sendScreen then\n\011\011local x,y,w,h = 0,0,sim.XRES-1,sim.YRES-1\n\011\011if L.smoved then\n\011\011\011local stm\n\011\011\011if L.copying then stm=L.lastCopy else stm=L.lastStamp end\n\011\011\011if L.rotate then stm.w,stm.h=stm.h,stm.w end\n\011\011\011x,y,w,h = math.floor((L.mousex-stm.w/2)/4)*4,math.floor((L.mousey-stm.h/2)/4)*4,stm.w,stm.h\n\011\011\011L.smoved=false\n\011\011\011L.copying=false\n\011\011end\n\011\011L.sendScreen=false\n\011\011local stampName,fullName = saveStamp(x,y,w,h)\n\011\011local f = assert(io.open(fullName,\"rb\"))\n\011\011local s = f:read\"*a\"\n\011\011f:close()\n\011\011deleteStamp(stampName)\n\011\011local d = #s\n\011\011local b1,b2,b3 = math.floor(x/16),((x%16)*16)+math.floor(y/256),(y%256)\n\011\011conSend(67,string.char(math.floor(x/16),((x%16)*16)+math.floor(y/256),(y%256),math.floor((x+w)/16),(((x+w)%16)*16)+math.floor((y+h)/256),((y+h)%256)))\n\011\011conSend(66,string.char(b1,b2,b3,math.floor(d/65536),math.floor(d/256)%256,d%256)..s)\n\011end\n\n\011--Check if custom modes were changed\n\011if jacobsmod and L.checkRen == 2 then\n\011\011L.checkRen = true\n\011elseif L.checkRen then\n\011\011L.checkRen=false\n\011\011local t,send=getViewModes(),false\n\011\011for k,v in pairs(t) do\n\011\011\011if v~=L.pModes[k] then\n\011\011\011\011send=true break\n\011\011\011end\n\011\011end\n\011\011if send then conSend(64,string.char(t[1],t[2],t[3])) end\n\011end\n\n\011--Send option menu settings\n\011if L.checkOpt then\n\011\011L.checkOpt=false\n\011\011conSend(56,string.char(tpt.heat()))\n\011\011conSend(53,string.char(tpt.ambient_heat()))\n\011\011conSend(54,string.char(tpt.newtonian_gravity()))\n\011\011conSend(57,string.char(sim.waterEqualisation()))\n\011\011conSend(58,string.char(sim.gravityMode()))\n\011\011conSend(59,string.char(sim.airMode()))\n\011\011conSend(68,string.char(sim.edgeMode()))\n\011end\n\nend\nlocal function updatePlayers()\n\011if con.members then\n\011\011for k,v in pairs(con.members) do\n\011\011\011playerMouseMove(k)\n\011\011end\n\011end\n\011--Keep last frame of stick2\n\011L.lastStick2=L.stick2\n\011L.stick2=false\nend\n\nlocal pressedKeys\nlocal function step()\n\011if not L.chatHidden then chatwindow:draw() else showbutton:draw() end\n\011if hooks_enabled then\n\011\011if pressedKeys and pressedKeys[\"repeat\"] < socket.gettime() then\n\011\011\011if pressedKeys[\"repeat\"] < socket.gettime()-.05 then\n\011\011\011\011pressedKeys = nil\n\011\011\011else\n\011\011\011\011chatwindow:textprocess(pressedKeys[\"key\"],pressedKeys[\"nkey\"],pressedKeys[\"modifier\"],pressedKeys[\"event\"])\n\011\011\011\011pressedKeys[\"repeat\"] = socket.gettime()+.065\n\011\011\011end\n\011\011end\n\011\011drawStuff()\n\011\011sendStuff()\n\011\011if L.pauseNextFrame then L.pauseNextFrame=false tpt.set_pause(1) end\n\011\011connectThink()\n\011\011updatePlayers()\n\011end\nend\n\n--some button locations that emulate tpt, return false will disable button\nlocal tpt_buttons = {\n\011[\"open\"] = {x1=1, y1=408, x2=17, y2=422, f=function() if not L.ctrl then L.browseMode=1 else L.browseMode=2 end L.lastSave=sim.getSaveID() end},\n\011[\"rload\"] = {x1=19, y1=408, x2=355, y2=422, firstClick = true, f=function() if L.lastSave then if L.ctrl then infoText:reset(\"If you re-opened the save, please type /sync\") else conSend(70) end else infoText:reset(\"Reloading local saves is not synced currently. Type /sync\") end end},\n\011[\"clear\"] = {x1=470, y1=408, x2=486, y2=422, f=function() conSend(63) L.lastSave=nil end},\n\011[\"opts\"] = {x1=581, y1=408, x2=595, y2=422, f=function() L.checkOpt=true end},\n\011[\"disp\"] = {x1=597, y1=408, x2=611, y2=422, f=function() L.checkRen=true L.pModes=getViewModes() end},\n\011[\"pause\"] = {x1=613, y1=408, x2=627, y2=422, firstClick = true, f=function() conSend(49,tpt.set_pause()==0 and \"\\1\" or \"\\0\") end},\n\011[\"deco\"] = {x1=613, y1=33, x2=627, y2=47, f=function() conSend(51,tpt.decorations_enable()==0 and \"\\1\" or \"\\0\") end},\n\011[\"newt\"] = {x1=613, y1=49, x2=627, y2=63, f=function() conSend(54,tpt.newtonian_gravity()==0 and \"\\1\" or \"\\0\") end},\n\011[\"ambh\"] = {x1=613, y1=65, x2=627, y2=79, f=function() conSend(53,tpt.ambient_heat()==0 and \"\\1\" or \"\\0\") end},\n}\nif jacobsmod then\n\011tpt_buttons[\"tab\"] = {x1=613, y1=1, x2=627, y2=15, firstClick = true, f=function() L.tabs = not L.tabs end}\n\011tpt_buttons[\"opts\"] = {x1=470, y1=408, x2=484, y2=422, f=function() L.checkOpt=true end}\n\011tpt_buttons[\"clear\"] = {x1=486, y1=408, x2=502, y2=422, firstClick = true, f=function() conSend(63) L.lastSave=nil end}\n\011tpt_buttons[\"disp\"] = {x1=597, y1=408, x2=611, y2=422, firstClick = true, f=function() L.checkRen=2 L.pModes=getViewModes() end}\n\011tpt_buttons[\"open\"] = {x1=1, y1=408, x2=17, y2=422, firstClick = true, f=function() if not L.ctrl then L.browseMode=4 else L.browseMode=5 end L.lastSave=sim.getSaveID() end}\nend\n\nlocal function mouseclicky(mousex,mousey,button,event,wheel)\n\011if L.chatHidden then showbutton:process(mousex,mousey,button,event,wheel) if not hooks_enabled then return true end end\n\011if L.stamp and button>0 and button~=2 then\n\011\011if event==1 and button==1 and L.stampx == -1 then\n\011\011\011--initial stamp coords\n\011\011\011L.stampx,L.stampy = mousex,mousey\n\011\011elseif event==2 then\n\011\011\011if L.skipClick then L.skipClick=false return true end\n\011\011\011--stamp has been saved, make our own copy\n\011\011\011if button==1 then\n\011\011\011\011--save stamp ourself for data, delete it\n\011\011\011\011local sx,sy = mousex,mousey\n\011\011\011\011if sx<L.stampx then L.stampx,sx=sx,L.stampx end\n\011\011\011\011if sy<L.stampy then L.stampy,sy=sy,L.stampy end\n\011\011\011\011--cheap cut hook to send a clear\n\011\011\011\011if L.copying==1 then\n\011\011\011\011\011--maybe this is ctrl+x? 67 is clear area\n\011\011\011\011\011conSend(67,string.char(math.floor(L.stampx/16),((L.stampx%16)*16)+math.floor(L.stampy/256),(L.stampy%256),math.floor(sx/16),((sx%16)*16)+math.floor(sy/256),(sy%256)))\n\011\011\011\011end\n\011\011\011\011local w,h = sx-L.stampx,sy-L.stampy\n\011\011\011\011local stampName,fullName = saveStamp(L.stampx,L.stampy,w,h)\n\011\011\011\011sx,sy,L.stampx,L.stampy = math.ceil((sx+1)/4)*4,math.ceil((sy+1)/4)*4,math.floor(L.stampx/4)*4,math.floor(L.stampy/4)*4\n\011\011\011\011w,h = sx-L.stampx, sy-L.stampy\n\011\011\011\011local f = assert(io.open(fullName,\"rb\"))\n\011\011\011\011if L.copying then L.lastCopy = {data=f:read\"*a\",w=w,h=h} else L.lastStamp = {data=f:read\"*a\",w=w,h=h} end\n\011\011\011\011f:close()\n\011\011\011\011deleteStamp(stampName)\n\011\011\011end\n\011\011\011L.stamp=false\n\011\011\011L.copying=false\n\011\011end\n\011\011return true\n\011elseif L.placeStamp and button>0 and button~=2 then\n\011\011if event==2 then\n\011\011\011if L.skipClick then L.skipClick=false return true end\n\011\011\011if button==1 then\n\011\011\011\011local stm\n\011\011\011\011if L.copying then stm=L.lastCopy else stm=L.lastStamp end\n\011\011\011\011if stm then\n\011\011\011\011\011if not stm.data then\n\011\011\011\011\011\011--unknown stamp, send full screen on next step, how can we read last created stamp, timestamps on files?\n\011\011\011\011\011\011L.sendScreen = (jacobsmod and 2 or true)\n\011\011\011\011\011else\n\011\011\011\011\011\011--send the stamp\n\011\011\011\011\011\011if L.smoved then\n\011\011\011\011\011\011\011--moved from arrows or rotate, send area next frame\n\011\011\011\011\011\011\011L.placeStamp=false\n\011\011\011\011\011\011\011L.sendScreen=true\n\011\011\011\011\011\011\011return true\n\011\011\011\011\011\011end\n\011\011\011\011\011\011local sx,sy = mousex-math.floor(stm.w/2),mousey-math.floor((stm.h)/2)\n\011\011\011\011\011\011if sx<0 then sx=0 end\n\011\011\011\011\011\011if sy<0 then sy=0 end\n\011\011\011\011\011\011if sx+stm.w>sim.XRES-1 then sx=sim.XRES-stm.w end\n\011\011\011\011\011\011if sy+stm.h>sim.YRES-1 then sy=sim.YRES-stm.h end\n\011\011\011\011\011\011local b1,b2,b3 = math.floor(sx/16),((sx%16)*16)+math.floor(sy/256),(sy%256)\n\011\011\011\011\011\011local d = #stm.data\n\011\011\011\011\011\011conSend(66,string.char(b1,b2,b3,math.floor(d/65536),math.floor(d/256)%256,d%256)..stm.data)\n\011\011\011\011\011end\n\011\011\011\011end\n\011\011\011end\n\011\011\011L.placeStamp=false\n\011\011\011L.copying=false\n\011\011end\n\011\011return true\n\011end\n\n\011if button > 0 and L.skipClick then L.skipClick=false return true end\n\011if chatwindow:process(mousex,mousey,button,event,wheel) then return false end\n\011if mousex<sim.XRES and mousey<sim.YRES then mousex,mousey = sim.adjustCoords(mousex,mousey) end\n\n\011local obut,oevnt = L.mButt,L.mEvent\n\011if button~=obut or event~=oevnt then\n\011\011L.mButt,L.mEvent = button,event\n\011\011--More accurate mouse from here (because this runs BEFORE step function, it would draw old coords)\n\011\011local b1,b2,b3 = math.floor(mousex/16),((mousex%16)*16)+math.floor(mousey/256),(mousey%256)\n\011\011conSend(32,string.char(b1,b2,b3))\n\011\011L.mousex,L.mousey = mousex,mousey\n\011\011conSend(33,string.char(L.mButt*16+L.mEvent))\n\011elseif L.mEvent==3 and (L.mousex~=mousex or L.mousey~=mousey) then\n\011\011local b1,b2,b3 = math.floor(mousex/16),((mousex%16)*16)+math.floor(mousey/256),(mousey%256)\n\011\011conSend(32,string.char(b1,b2,b3))\n\011\011L.mousex,L.mousey = mousex,mousey\n\011end\n\011--Temporary SPRK floodfill crash block\n\011if L.shift and L.ctrl and event == 1 and ((button == 1 and L.sell==15) or (button == 4 and L.selr==15) or (button == 2 and L.sela==15)) then\n\011\011return false\n\011end\n\n\011--Click inside button first\n\011if button==1 then\n\011\011if event==1 then\n\011\011\011if jacobsmod and (L.tabs or L.ctrl) and mousex>=613 and mousex<=627 and mousey >=17 and mousey<=143 then\n\011\011\011\011L.sendScreen = 2\n\011\011\011end\n\011\011\011for k,v in pairs(tpt_buttons) do\n\011\011\011\011if mousex>=v.x1 and mousex<=v.x2 and mousey>=v.y1 and mousey<=v.y2 then\n\011\011\011\011\011if jacobsmod and tpt_buttons[k].firstClick then\n\011\011\011\011\011\011return tpt_buttons[k].f()~=false\n\011\011\011\011\011else\n\011\011\011\011\011\011L.downInside = k\n\011\011\011\011\011end\n\011\011\011\011\011break\n\011\011\011\011end\n\011\011\011end\n\011\011--Up inside the button we started with\n\011\011elseif event==2 and L.downInside then\n\011\011\011local butt = tpt_buttons[L.downInside]\n\011\011\011if (jacobsmod and not butt.firstClick) or (mousex>=butt.x1 and mousex<=butt.x2 and mousey>=butt.y1 and mousey<=butt.y2) then\n\011\011\011\011L.downInside = nil\n\011\011\011\011return butt.f()~=false\n\011\011\011end\n\011\011--Mouse hold, we MUST stay inside button or don't trigger on up\n\011\011elseif event==3 and L.downInside then\n\011\011\011local butt = tpt_buttons[L.downInside]\n\011\011\011if mousex<butt.x1 or mousex>butt.x2 or mousey<butt.y1 or mousey>butt.y2 then\n\011\011\011\011L.downInside = nil\n\011\011\011end\n\011\011end\n\011end\nend\n\nlocal keypressfuncs = {\n\011--TAB\n\011[9] = function() conSend(35) end,\n\n\011--ESC\n\011[27] = function() if not L.chatHidden then L.chatHidden = true TPTMP.chatHidden = true return false end end,\n\n\011--space, pause toggle\n\011[32] = function() conSend(49,tpt.set_pause()==0 and \"\\1\" or \"\\0\") end,\n\n\011--View modes 0-9\n\011[48] = function() conSend(48,\"\\10\") end,\n\011[49] = function() if L.shift then conSend(48,\"\\9\") tpt.display_mode(9)--[[force local display mode, screw debug check for now]] return false end conSend(48,\"\\0\") end,\n\011[50] = function() conSend(48,\"\\1\") end,\n\011[51] = function() conSend(48,\"\\2\") end,\n\011[52] = function() conSend(48,\"\\3\") end,\n\011[53] = function() conSend(48,\"\\4\") end,\n\011[54] = function() conSend(48,\"\\5\") end,\n\011[55] = function() conSend(48,\"\\6\") end,\n\011[56] = function() conSend(48,\"\\7\") end,\n\011[57] = function() conSend(48,\"\\8\") end,\n\n\011--semicolon / ins / del for replace mode\n\011[59] = function() if L.ctrl then  L.replacemode = bit.bxor(L.replacemode, 2) else  L.replacemode = bit.bxor(L.replacemode, 1) end conSend(38, L.replacemode) end,\n\011[277] = function() L.replacemode = bit.bxor(L.replacemode, 1) conSend(38, L.replacemode) end,\n\011[127] = function() L.replacemode = bit.bxor(L.replacemode, 2) conSend(38, L.replacemode) end,\n\n\011--= key, pressure/spark reset\n\011[61] = function() if L.ctrl then conSend(60) else conSend(61) end end,\n\n\011--`, console\n\011[96] = function() if not L.shift and con.connected then infoText:reset(\"Console does not sync, use shift+` to open instead\") return false end end,\n\n\011--b , deco, pauses sim\n\011[98] = function() if L.ctrl then conSend(51,tpt.decorations_enable()==0 and \"\\1\" or \"\\0\") else conSend(49,\"\\1\") conSend(51,\"\\1\") end end,\n\n\011--c , copy\n\011[99] = function() if L.ctrl then L.stamp=true L.copying=true L.stampx = -1 L.stampy = -1 end end,\n\n\011--d key, debug, api broken right now\n\011--[100] = function() conSend(55) end,\n\n\011--F , frame step\n\011[102] = function() if not jacobsmod or (not L.ctrl and not L.shift) then conSend(50) end end,\n\n\011--H , HUD and intro text\n\011[104] = function() if L.ctrl and jacobsmod then return false end end,\n\n\011--I , invert pressure\n\011[105] = function() conSend(62) end,\n\n\011--K , stamp menu, abort our known stamp, who knows what they picked, send full screen?\n\011[107] = function() L.lastStamp={data=nil,w=0,h=0} L.placeStamp=true end,\n\n\011--L , last Stamp\n\011[108] = function() if L.lastStamp then L.placeStamp=true end end,\n\n\011--N , newtonian gravity or new save\n\011[110] = function() if jacobsmod and L.ctrl then L.sendScreen=2 L.lastSave=nil else conSend(54,tpt.newtonian_gravity()==0 and \"\\1\" or \"\\0\") end end,\n\n\011--O, old menu in jacobs mod\n\011[111] = function() if jacobsmod and not L.ctrl then if tpt.oldmenu()==0 then showbutton:onmove(0, 256) else showbutton:onmove(0, -256) end end end,\n\n\011--R , for stamp rotate\n\011[114] = function() if L.placeStamp then L.smoved=true if L.shift then return end L.rotate=not L.rotate elseif L.ctrl then conSend(70) end end,\n\n\011--S, stamp\n\011[115] = function() if (L.lastStick2 and not L.ctrl) or (jacobsmod and L.ctrl) then return end L.stamp=true L.stampx = -1 L.stampy = -1 end,\n\n\011--T, tabs\n\011[116] = function() if jacobsmod then L.tabs = not L.tabs end end,\n\n\011--U, ambient heat toggle\n\011[117] = function() conSend(53,tpt.ambient_heat()==0 and \"\\1\" or \"\\0\") end,\n\n\011--V, paste the copystamp\n\011[118] = function() if L.ctrl and L.lastCopy then L.placeStamp=true L.copying=true end end,\n\n\011--X, cut a copystamp and clear\n\011[120] = function() if L.ctrl then L.stamp=true L.copying=1 L.stampx = -1 L.stampy = -1 end end,\n\n\011--W,Y (grav mode, air mode)\n\011[119] = function() if L.lastStick2 and not L.ctrl then return end conSend(58,string.char((sim.gravityMode()+1)%3)) return true end,\n\011[121] = function() conSend(59,string.char((sim.airMode()+1)%5)) return true end,\n\011--Z\n\011[122] = function() myZ=true L.skipClick=true end,\n\n\011--Arrows for stamp adjust\n\011[273] = function() if L.placeStamp then L.smoved=true end end,\n\011[274] = function() if L.placeStamp then L.smoved=true end end,\n\011[275] = function() if L.placeStamp then L.smoved=true end end,\n\011[276] = function() if L.placeStamp then L.smoved=true end end,\n\n\011--F1 , intro text\n\011[282] = function() if jacobsmod then return false end end,\n\n\011--F5 , save reload\n\011[286] = function() conSend(70) end,\n\n\011--SHIFT,CTRL,ALT\n\011[303] = function() L.shift=true conSend(36,string.char(17)) end,\n\011[304] = function() L.shift=true conSend(36,string.char(17)) end,\n\011[305] = function() L.ctrl=true conSend(36,string.char(1)) end,\n\011[306] = function() L.ctrl=true conSend(36,string.char(1)) end,\n\011[307] = function() L.alt=true conSend(36,string.char(33)) end,\n\011[308] = function() L.alt=true conSend(36,string.char(33)) end,\n}\nlocal keyunpressfuncs = {\n\011--Z\n\011[122] = function() myZ=false L.skipClick=false if L.alt then L.skipClick=true end end,\n\011--SHIFT,CTRL,ALT\n\011[303] = function() L.shift=false conSend(36,string.char(16)) end,\n\011[304] = function() L.shift=false conSend(36,string.char(16)) end,\n\011[305] = function() L.ctrl=false conSend(36,string.char(0)) end,\n\011[306] = function() L.ctrl=false conSend(36,string.char(0)) end,\n\011[307] = function() L.alt=false conSend(36,string.char(32)) end,\n\011[308] = function() L.alt=false conSend(36,string.char(32)) end,\n}\nlocal function keyclicky(key,nkey,modifier,event)\n\011if not hooks_enabled then\n\011\011if jacobsmod and not L.ctrl and key == 'o' and event == 1 then if tpt.oldmenu()==0 then showbutton:onmove(0, 256) else showbutton:onmove(0, -256) end end\n\011\011return\n\011end\n\011if chatwindow.inputbox.focus then\n\011\011if event == 1 and nkey~=13 and nkey~=27 then\n\011\011\011pressedKeys = {[\"repeat\"] = socket.gettime()+.6, [\"key\"] = key, [\"nkey\"] = nkey, [\"modifier\"] = modifier, [\"event\"] = event}\n\011\011elseif event == 2 and pressedKeys and nkey == pressedKeys[\"nkey\"] then\n\011\011\011pressedKeys = nil\n\011\011end\n\011end\n\011local check = chatwindow:textprocess(key,nkey,modifier,event)\n\011if type(check)==\"boolean\" then return not check end\n\011--_print(nkey)\n\011local ret\n\011if event==1 then\n\011\011if keypressfuncs[nkey] then\n\011\011\011ret = keypressfuncs[nkey]()\n\011\011end\n\011elseif event==2 then\n\011\011if keyunpressfuncs[nkey] then\n\011\011\011ret = keyunpressfuncs[nkey]()\n\011\011end\n\011end\n\011if ret~= nil then return ret end\nend\n\nfunction TPTMP.disableMultiplayer()\n\011tpt.unregister_step(step)\n\011tpt.unregister_mouseclick(mouseclicky)\n\011tpt.unregister_keypress(keyclicky)\n\011TPTMP = nil\n\011disconnected(\"TPTMP unloaded\")\nend\n\nfunction TPTMP.enableMultiplayer()\n\011hooks_enabled = true\n\011TPTMP.enableMultiplayer = nil\n\011debug.sethook(nil,\"\",0)\n\011if jacobsmod then\n\011\011--clear intro text tooltip\n\011\011gfx.toolTip(\"\", 0, 0, 0, 4)\n\011end\nend\nTPTMP.con = con\nTPTMP.chatHidden = true\ntpt.register_step(step)\ntpt.register_mouseclick(mouseclicky)\ntpt.register_keypress(keyclicky)\n";
	luaL_loadbuffer(l, multiplayer_luac, multiplayer_luac_sz, "@multiplayer.lua");
	lua_pcall(l, 0, 0, 0);
#endif
}
#endif
*/
