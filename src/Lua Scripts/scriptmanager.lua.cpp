/**
#include "lua/LuaScriptInterface.h"

#include "lua/LuaLuna.h"
#include "lua/LuaScriptHelper.h"
#include "lua/LuaBit.h"

#include "lua/LuaWindow.h"
#include "lua/LuaButton.h"
#include "lua/LuaLabel.h"
#include "lua/LuaTextbox.h"
#include "lua/LuaCheckbox.h"
#include "lua/LuaSlider.h"
#include "lua/LuaProgressBar.h"
void luaopen_scriptmanager(lua_State *l)
{
#ifndef _MSC_VER
	int scriptmanager_luac_sz = 37193;
	const char* scriptmanager_luac = "--Cracker64's Autorun Script Manager\n--The autorun to end all autoruns\n--Version 3.3\n\n--TODO:\n--manual file addition (that can be anywhere and any extension)\n--Moving window (because why not)\n--some more API functions\n--prettier, organize code\n\n--CHANGES:\n--Version 3.3: fix apostophes in filenames, allow authors to rename their scripts on the server\n--Version 3.2: put MANAGER stuff in table, fix displaying changelogs\n--Version 3.1: Organize scripts less randomly, fix scripts being run twice, fix other bugs\n--central script / update server at starcatcher.us / delete local scripts / lots of other things by jacob1 v3.0\n--Scan all subdirectories in scripts folder! v2.25\n--Remove step hooks, v87 fixes them\n--Socket is now default in v87+ , horray, everyone can now use update features without extra downloads.\n--Handles up to 50 extra step functions, up from the default 5 (not including the manager's step) v2.1\n--Other various nice API functions\n--Scripts can store/retrieve settings through the manager, see comments below v2.0\n--Small fillrect change for v85, boxes can have backgrounds v1.92\n--Support spaces in exe names v1.91\n--Auto-update for OTHER scripts now works, is a bit messy, will fix later, but nothing should change for users to use this\n--  Place a line '--VER num UPDATE link' in one of the first four lines of the file, see my above example\n--  The link at top downloads a file that contains ONLY version,full link,and prints the rest(changelog). See my link for example\n\nif not socket then error(\"TPT version not supported\") end\nif MANAGER then error(\"manager is already running\") end\nif tpt.version.jacob1s_mod == 30 and tpt.version.jacob1s_mod_minor == 0 then\n\011return\nend\n\nlocal scriptversion = 4\nMANAGER = {[\"version\"] = \"3.3\", [\"scriptversion\"] = scriptversion, [\"hidden\"] = true}\n\nlocal TPT_LUA_PATH = 'scripts'\nlocal PATH_SEP = '\\\\'\nlocal WINDOWS=true\nlocal jacobsmod = tpt.version.jacob1s_mod\nlocal EXE_NAME = \"Powder.exe\"\nif jacobsmod then\n\011EXE_NAME = \"Jacob1\\'s\\ Mod.exe\"\nend\nlocal CHECKUPDATE = false\nif os.getenv('HOME') then\n\011PATH_SEP = '/'\n\011if jacobsmod then\n\011\011EXE_NAME = \"Jacob1\\'s\\ Mod\"\n\011else\n\011\011EXE_NAME = \"powder\"\n\011end\n\011WINDOWS=false\nend\nlocal filenames = {}\nlocal num_files = 0 --downloaded scripts aren't stored in filenames\nlocal localscripts = {}\nlocal onlinescripts = {}\nlocal running = {}\nlocal requiresrestart=false\nlocal online = false\nlocal first_online = true\nlocal updatetable --temporarily holds info on script manager updates\nlocal gen_buttons\nlocal sidebutton\nlocal download_file\nlocal settings = {}\nmath.randomseed(os.time()) math.random() math.random() math.random() --some filler randoms\n\n--get line that can be saved into scriptinfo file\nlocal function scriptInfoString(info)\n\011--Write table into data format\n\011if type(info)~=\"table\" then return end\n\011local t = {}\n\011for k,v in pairs(info) do\n\011\011table.insert(t,k..\":\\\"\"..v..\"\\\"\")\n\011end\n\011local rstr = table.concat(t,\",\"):gsub(\"\\n\",\"\\\\n\")\n\011return rstr\nend\n\n--read a scriptinfo line\nlocal function readScriptInfo(list)\n\011if not list then return {} end\n\011local scriptlist = {}\n\011for i in list:gmatch(\"[^\\n]+\") do\n\011\011local t = {}\n\011\011local ID = 0\n\011\011for k,v in i:gmatch(\"(%w+):\\\"([^\\\"]*)\\\"\") do\n\011\011\011t[k]= tonumber(v) or v:gsub(\"\\\\n\",\"\\n\")\n\011\011end\n\011\011scriptlist[t.ID] = t\n\011end\n\011return scriptlist\nend\n\n--save settings\nlocal function save_last()\n\011local savestring=\"\"\n\011for script,v in pairs(running) do\n\011\011savestring = savestring..\" \\\"\"..script..\"\\\"\"\n\011end\n\011savestring = \"SAV \"..savestring..\"\\nEXE \"..EXE_NAME..\"\\nDIR \"..TPT_LUA_PATH\n\011for k,t in pairs(settings) do\n\011for n,v in pairs(t) do\n\011\011savestring = savestring..\"\\nSET \"..k..\" \"..n..\":\\\"\"..v..\"\\\"\"\n\011end\n\011end\n\011local f\n\011if TPT_LUA_PATH == \"scripts\" then\n\011\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"autorunsettings.txt\", \"w\")\n\011else\n\011\011f = io.open(\"autorunsettings.txt\", \"w\")\n\011end\n\011if f then\n\011\011f:write(savestring)\n\011\011f:close()\n\011end\n\n\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"downloaded\"..PATH_SEP..\"scriptinfo\", \"w\")\n\011if f then\n\011\011for k,v in pairs(localscripts) do\n\011\011\011f:write(scriptInfoString(v)..\"\\n\")\n\011\011end\n\011\011f:close()\n\011end\nend\n\n--load settings before anything else\nlocal function load_last()\n\011local f = io.open(TPT_LUA_PATH..PATH_SEP..\"autorunsettings.txt\",\"r\")\n\011if not f then\n\011\011f = io.open(\"autorunsettings.txt\",\"r\")\n\011end\n\011if f then\n\011\011local lines = {}\n\011\011local line = f:read(\"*l\")\n\011\011while line do\n\011\011\011table.insert(lines,line)\n\011\011\011line = f:read(\"*l\")\n\011\011end\n\011\011f:close()\n\011\011for i=1, #lines do\n\011\011\011local tok=lines[i]:sub(1,3)\n\011\011\011local str=lines[i]:sub(5)\n\011\011\011if tok==\"SAV\" then\n\011\011\011\011for word in string.gmatch(str, \"\\\"(.-)\\\"\") do running[word] = true end\n\011\011\011elseif tok==\"EXE\" then\n\011\011\011\011EXE_NAME=str\n\011\011\011elseif tok==\"DIR\" then\n\011\011\011\011TPT_LUA_PATH=str\n\011\011\011elseif tok==\"SET\" then\n\011\011\011local ident,name,val = string.match(str,\"(.-) (.-):\\\"(.-)\\\"\")\n\011\011if settings[ident] then settings[ident][name]=val\n\011\011else settings[ident]={[name]=val} end\n\011\011\011end\n\011\011end\n\011end\n\n\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"downloaded\"..PATH_SEP..\"scriptinfo\",\"r\")\n\011if f then\n\011\011local lines = f:read(\"*a\")\n\011\011f:close()\n\011\011localscripts = readScriptInfo(lines)\n\011\011for k,v in pairs(localscripts) do\n\011\011\011if k ~= 1 then\n\011\011\011\011if not v[\"ID\"] or not v[\"name\"] or not v[\"description\"] or not v[\"path\"] or not v[\"version\"] then\n\011\011\011\011\011localscripts[k] = nil\n\011\011\011\011elseif not fs.exists(TPT_LUA_PATH..\"/\"..v[\"path\"]:gsub(\"\\\\\",\"/\")) then\n\011\011\011\011\011 localscripts[k] = nil\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\nend\nload_last()\n--get list of files in scripts folder\nlocal function load_filenames()\n\011filenames = {}\n\011local function searchRecursive(directory)\n\011\011local dirlist = fs.list(directory)\n\011\011if not dirlist then return end\n\011\011for i,v in ipairs(dirlist) do\n\011\011\011local file = directory..\"/\"..v\n\011\011\011if fs.isDirectory(file) and v ~= \"downloaded\" then\n\011\011\011\011searchRecursive(file)\n\011\011\011elseif fs.isFile(file) then\n\011\011\011\011if file:find(\"%.lua$\") then\n\011\011\011\011\011local toinsert = file:sub(#TPT_LUA_PATH+2)\n\011\011\011\011\011if WINDOWS then\n\011\011\011\011\011\011toinsert = toinsert:gsub(\"/\", \"\\\\\") --not actually required\n\011\011\011\011\011end\n\011\011\011\011\011table.insert(filenames, toinsert)\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\n\011searchRecursive(TPT_LUA_PATH)\n\011table.sort(filenames, function(first,second) return first:lower() < second:lower() end)\nend\n--ui object stuff\nlocal ui_base local ui_box local ui_line local ui_text local ui_button local ui_scrollbar local ui_tooltip local ui_checkbox local ui_console local ui_window\nlocal tooltip\nui_base = {\nnew = function()\n\011local b={}\n\011b.drawlist = {}\n\011function b:drawadd(f)\n\011\011table.insert(self.drawlist,f)\n\011end\n\011function b:draw(...)\n\011\011for _,f in ipairs(self.drawlist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,unpack(arg))\n\011\011\011end\n\011\011end\n\011end\n\011b.movelist = {}\n\011function b:moveadd(f)\n\011\011table.insert(self.movelist,f)\n\011end\n\011function b:onmove(x,y)\n\011\011for _,f in ipairs(self.movelist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,x,y)\n\011\011\011end\n\011\011end\n\011end\n\011return b\nend\n}\nui_box = {\nnew = function(x,y,w,h,r,g,b)\n\011local box=ui_base.new()\n\011box.x=x box.y=y box.w=w box.h=h box.x2=x+w box.y2=y+h\n\011box.r=r or 255 box.g=g or 255 box.b=b or 255\n\011function box:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011function box:setbackground(r,g,b,a) self.br=r self.bg=g self.bb=b self.ba=a end\n\011box.drawbox=true\n\011box.drawbackground=false\n\011box:drawadd(function(self) if self.drawbackground then tpt.fillrect(self.x,self.y,self.w+1,self.h+1,self.br,self.bg,self.bb,self.ba) end\n\011\011\011\011\011\011\011\011if self.drawbox then tpt.drawrect(self.x,self.y,self.w,self.h,self.r,self.g,self.b) end end)\n\011box:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x self.x2=self.x2+x end\n\011\011if y then self.y=self.y+y self.y2=self.y2+y end\n\011end)\n\011return box\nend\n}\nui_line = {\nnew=function(x,y,x2,y2,r,g,b)\n\011local line=ui_box.new(x,y,x2-x,y2-y,r,g,b)\n\011--Line is essentially a box, but with a different draw\n\011line.drawlist={}\n\011line:drawadd(function(self) tpt.drawline(self.x,self.y,self.x2,self.y2,self.r,self.g,self.b) end)\n\011return line\n\011end\n}\nui_text = {\nnew = function(text,x,y,r,g,b)\n\011local txt = ui_base.new()\n\011txt.text = text\n\011txt.x=x or 0 txt.y=y or 0 txt.r=r or 255 txt.g=g or 255 txt.b=b or 255\n\011function txt:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011txt:drawadd(function(self,x,y) tpt.drawtext(x or self.x,y or self.y,self.text,self.r,self.g,self.b) end)\n\011txt:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function txt:process() return false end\n\011return txt\nend,\n--Scrolls while holding mouse over\nnewscroll = function(text,x,y,vis,r,g,b)\n\011local txt = ui_text.new(text,x,y,r,g,b)\n\011if tpt.textwidth(text)<vis then return txt end\n\011txt.visible=vis\n\011txt.length=string.len(text)\n\011txt.start=1\n\011txt.drawlist={} --reset draw\n\011txt.timer=socket.gettime()+3\n\011function txt:cuttext(self)\n\011\011local last = self.start+1\n\011\011while tpt.textwidth(self.text:sub(self.start,last))<txt.visible and last<=self.length do\n\011\011\011last = last+1\n\011\011end\n\011\011self.last=last-1\n\011end\n\011txt:cuttext(txt)\n\011txt.minlast=txt.last-1\n\011txt.ppl=((txt.visible-6)/(txt.length-txt.minlast+1))\n\011txt:drawadd(function(self,x,y)\n\011\011if socket.gettime() > self.timer then\n\011\011\011if self.last >= self.length then\n\011\011\011\011self.start = 1\n\011\011\011\011self:cuttext(self)\n\011\011\011\011self.timer = socket.gettime()+3\n\011\011\011else\n\011\011\011\011self.start = self.start + 1\n\011\011\011\011self:cuttext(self)\n\011\011\011\011if self.last >= self.length then\n\011\011\011\011\011self.timer = socket.gettime()+3\n\011\011\011\011else\n\011\011\011\011\011self.timer = socket.gettime()+.15\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011tpt.drawtext(x or self.x,y or self.y, self.text:sub(self.start,self.last) ,self.r,self.g,self.b)\n\011end)\n\011function txt:process(mx,my,button,event,wheel)\n\011\011if event==3 then\n\011\011\011local newlast = math.floor((mx-self.x)/self.ppl)+self.minlast\n\011\011\011if newlast<self.minlast then newlast=self.minlast end\n\011\011\011if newlast>0 and newlast~=self.last then\n\011\011\011\011local newstart=1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast\n\011\011\011\011self.timer = socket.gettime()+3\n\011\011\011end\n\011\011end\n\011end\n\011return txt\nend\n}\nui_scrollbar = {\nnew = function(x,y,h,t,m)\n\011local bar = ui_base.new() --use line object as base?\n\011bar.x=x bar.y=y bar.h=h\n\011bar.total=t\n\011bar.numshown=m\n\011bar.pos=0\n\011bar.length=math.floor((1/math.ceil(bar.total-bar.numshown+1))*bar.h)\n\011bar.soffset=math.floor(bar.pos*((bar.h-bar.length)/(bar.total-bar.numshown)))\n\011function bar:update(total,shown,pos)\n\011\011self.pos=pos or 0\n\011\011if self.pos<0 then self.pos=0 end\n\011\011self.total=total\n\011\011self.numshown=shown\n\011\011self.length= math.floor((1/math.ceil(self.total-self.numshown+1))*self.h)\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011function bar:move(wheel)\n\011\011self.pos = self.pos-wheel\n\011\011if self.pos < 0 then self.pos=0 end\n\011\011if self.pos > (self.total-self.numshown) then self.pos=(self.total-self.numshown) end\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011bar:drawadd(function(self)\n\011\011if self.total > self.numshown then\n\011\011\011tpt.drawline(self.x,self.y+self.soffset,self.x,self.y+self.soffset+self.length)\n\011\011end\n\011end)\n\011bar:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function bar:process(mx,my,button,event,wheel)\n\011\011if wheel~=0 and not MANAGER.hidden then\n\011\011\011if self.total > self.numshown then\n\011\011\011\011local previous = self.pos\n\011\011\011\011self:move(wheel)\n\011\011\011\011if self.pos~=previous then\n\011\011\011\011\011return previous-self.pos\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011--possibly click the bar and drag?\n\011\011return false\n\011end\n\011return bar\nend\n}\nui_button = {\nnew = function(x,y,w,h,f,text)\n\011local b = ui_box.new(x,y,w,h)\n\011b.f=f\n\011b.t=ui_text.new(text,x+2,y+2)\n\011b.drawbox=false\n\011b.clicked=false\n\011b.almostselected=false\n\011b.invert=true\n\011b:setbackground(127,127,127,125)\n\011b:drawadd(function(self)\n\011\011if self.invert and self.almostselected then\n\011\011\011self.almostselected=false\n\011\011\011tpt.fillrect(self.x,self.y,self.w,self.h)\n\011\011\011local tr=self.t.r local tg=self.t.g local tb=self.t.b\n\011\011\011b.t:setcolor(0,0,0)\n\011\011\011b.t:draw()\n\011\011\011b.t:setcolor(tr,tg,tb)\n\011\011else\n\011\011\011if tpt.mousex>=self.x and tpt.mousex<=self.x2 and tpt.mousey>=self.y and tpt.mousey<=self.y2 then\n\011\011\011\011self.drawbackground=true\n\011\011\011else\n\011\011\011\011self.drawbackground=false\n\011\011\011end\n\011\011\011b.t:draw()\n\011\011end\n\011end)\n\011b:moveadd(function(self,x,y)\n\011\011self.t:onmove(x,y)\n\011end)\n\011function b:process(mx,my,button,event,wheel)\n\011\011local clicked = self.clicked\n\011\011if event==2 then self.clicked = false end\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\n\011\011if event==1 then\n\011\011\011self.clicked=true\n\011\011elseif clicked then\n\011\011\011if event==3 then self.almostselected=true end\n\011\011\011if event==2 then self:f() end\n\011\011\011return true\n\011\011end\n\011end\n\011return b\nend\n}\nui_tooltip = {\nnew = function(x,y,w,text)\n\011local b = ui_box.new(x,y-1,w,0)\n\011function b:updatetooltip(tooltip)\n\011\011self.tooltip = tooltip\n\011\011self.length = #tooltip\n\011\011self.lines = 0\n\011\011local start,last = 1,2\n\011\011while last <= self.length do\n\011\011\011while tpt.textwidth(self.tooltip:sub(start,last)) < w and last <= self.length and self.tooltip:sub(last,last) ~= '\\n' do\n\011\011\011\011last = last + 1\n\011\011\011end\n\011\011\011if last <= self.length and self.tooltip:sub(last,last) ~= '\\n' then\n\011\011\011\011self.length = self.length + 1\n\011\011\011\011self.tooltip = self.tooltip:sub(1,last-1)..\"\\n\"..self.tooltip:sub(last)\n\011\011\011end\n\011\011\011last = last + 1\n\011\011\011start = last\n\011\011\011self.lines = self.lines + 1\n\011\011end\n\011\011self.h = self.lines*12+2\n\011\011--if self.lines == 1 then self.w = tpt.textwidth(self.tooltip)+3 end\n\011\011self.drawbox = tooltip ~= \"\"\n\011\011self.drawbackground = tooltip ~= \"\"\n\011end\n\011function b:settooltip(tooltip_)\n\011\011tooltip:onmove(tpt.mousex+5-tooltip.x, tpt.mousey+5-tooltip.y)\n\011\011tooltip:updatetooltip(tooltip_)\n\011end\n\011b:updatetooltip(text)\n\011b:setbackground(0,0,0,255)\n\011b.drawbackground = true\n\011b:drawadd(function(self)\n\011\011if self.tooltip ~= \"\" then\n\011\011\011tpt.drawtext(self.x+1,self.y+2,self.tooltip)\n\011\011end\n\011\011self:updatetooltip(\"\")\n\011end)\n\011function b:process(mx,my,button,event,wheel) end\n\011return b\nend\n}\nui_checkbox = {\nup_button = function(x,y,w,h,f,text)\n\011local b=ui_button.new(x,y,w,h,f,text)\n\011b.canupdate=false\n\011return b\nend,\nnew_button = function(x,y,w,h,splitx,f,f2,text)\n\011local b = ui_box.new(x,y,splitx,h)\n\011b.f=f b.f2=f2\n\011b.splitx = splitx\n\011b.t=ui_text.newscroll(text,x+24,y+2,splitx-24)\n\011b.clicked=false\n\011b.selected=false\n\011b.checkbut=ui_checkbox.up_button(x+splitx+9,y,33,9,ui_button.scriptcheck,\"Update\")\n\011b.drawbox=false\n\011b:setbackground(127,127,127,100)\n\011b:drawadd(function(self)\n\011\011if self.t.text == \"\" then return end\n\011\011if tpt.mousex>=self.x and tpt.mousex<self.x2 and tpt.mousey>=self.y and tpt.mousey<self.y2 then\n\011\011\011local script\n\011\011\011if online and onlinescripts[self.ID][\"description\"] then\n\011\011\011\011script = onlinescripts[self.ID]\n\011\011\011elseif not online and localscripts[self.ID] then\n\011\011\011\011script = localscripts[self.ID]\n\011\011\011end\n\011\011\011if script then\n\011\011\011\011tooltip:settooltip(script[\"name\"]..\" by \"..script[\"author\"]..\"\\n\\n\"..script[\"description\"])\n\011\011\011end\n\011\011\011self.drawbackground=true\n\011\011else\n\011\011\011if tpt.mousey>=self.y and tpt.mousey<self.y2 and tpt.mousex > self.x then\n\011\011\011\011if tpt.mousex < self.x2+9 and self.running then\n\011\011\011\011\011tooltip:settooltip(online and \"downloaded\" or \"running\")\n\011\011\011\011elseif tpt.mousex >= self.x2+9 and tpt.mousex < self.x2+43 and self.checkbut.canupdate and onlinescripts[self.ID] and onlinescripts[self.ID][\"changelog\"] then\n\011\011\011\011\011tooltip:settooltip(onlinescripts[self.ID][\"changelog\"])\n\011\011\011\011end\n\011\011\011end\n\011\011\011self.drawbackground=false\n\011\011end\n\011\011self.t:draw()\n\011\011if self.f2 then\n\011\011\011if self.deletealmostselected then\n\011\011\011\011self.deletealmostselected = false\n\011\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\134\", 255, 48, 32, 255)\n\011\011\011else\n\011\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\134\", 160, 48, 32, 255)\n\011\011\011end\n\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\133\", 255, 255, 255, 255)\n\011\011end\n\011\011tpt.drawrect(self.x+12,self.y+1,8,8)\n\011\011if self.almostselected then self.almostselected=false tpt.fillrect(self.x+12,self.y+1,8,8,150,150,150)\n\011\011elseif self.selected then tpt.fillrect(self.x+12,self.y+1,8,8) end\n\011\011local filepath = self.ID and localscripts[self.ID] and localscripts[self.ID][\"path\"] or self.t.text\n\011\011if self.running then tpt.drawtext(self.x+self.splitx+2,self.y+2,online and \"D\" or \"R\") end\n\011\011if self.checkbut.canupdate then self.checkbut:draw() end\n\011end)\n\011b:moveadd(function(self,x,y)\n\011\011self.t:onmove(x,y)\n\011\011self.checkbut:onmove(x,y)\n\011end)\n\011function b:process(mx,my,button,event,wheel)\n\011\011if self.f2 and mx <= self.x+8 then\n\011\011\011if event==1 then\n\011\011\011\011self.clicked = 1\n\011\011\011elseif self.clicked == 1 then\n\011\011\011\011if event==3 then self.deletealmostselected = true end\n\011\011\011\011if event==2 then self:f2() end\n\011\011\011end\n\011\011elseif self.f and mx<=self.x+self.splitx then\n\011\011\011if event==1 then\n\011\011\011\011self.clicked = 2\n\011\011\011elseif self.clicked == 2 then\n\011\011\011\011if event==3 then self.almostselected=true end\n\011\011\011\011if event==2 then self:f() end\n\011\011\011\011self.t:process(mx,my,button,event,wheel)\n\011\011\011end\n\011\011else\n\011\011\011if self.checkbut.canupdate then self.checkbut:process(mx,my,button,event,wheel) end\n\011\011end\n\011\011return true\n\011end\n\011return b\nend,\nnew = function(x,y,w,h)\n\011local box = ui_box.new(x,y,w,h)\n\011box.list={}\n\011box.numlist = 0\n\011box.max_lines = math.floor(box.h/10)-1\n\011box.max_text_width = math.floor(box.w*0.8)\n\011box.splitx=x+box.max_text_width\n\011box.scrollbar = ui_scrollbar.new(box.x2-2,box.y+11,box.h-12,0,box.max_lines)\n\011box.lines={\n\011\011ui_line.new(box.x+1,box.y+10,box.x2-1,box.y+10,170,170,170),\n\011\011ui_line.new(box.x+22,box.y+10,box.x+22,box.y2-1,170,170,170),\n\011\011ui_line.new(box.splitx,box.y+10,box.splitx,box.y2-1,170,170,170),\n\011\011ui_line.new(box.splitx+9,box.y+10,box.splitx+9,box.y2-1,170,170,170),\n\011}\n\011function box:updatescroll()\n\011\011self.scrollbar:update(self.numlist,self.max_lines)\n\011end\n\011function box:clear()\n\011\011self.list={}\n\011\011self.numlist=0\n\011end\n\011function box:add(f,f2,text)\n\011\011local but = ui_checkbox.new_button(self.x,self.y+1+((self.numlist+1)*10),tpt.textwidth(text)+4,10,self.max_text_width,f,f2,text)\n\011\011table.insert(self.list,but)\n\011\011self.numlist = #self.list\n\011\011return but\n\011end\n\011box:drawadd(function (self)\n\011\011tpt.drawtext(self.x+24,self.y+2,\"Files in \"..TPT_LUA_PATH..\" folder\")\n\011\011tpt.drawtext(self.splitx+11,self.y+2,\"Update\")\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011line:draw()\n\011\011end\n\011\011self.scrollbar:draw()\n\011\011local restart = false\n\011\011for i,check in ipairs(self.list) do\n\011\011\011local filepath = check.ID and localscripts[check.ID] and localscripts[check.ID][\"path\"] or check.t.text\n\011\011\011if not check.selected and running[filepath] then\n\011\011\011\011restart = true\n\011\011\011end\n\011\011\011if i>self.scrollbar.pos and i<=self.scrollbar.pos+self.max_lines then\n\011\011\011\011check:draw()\n\011\011\011end\n\011\011end\n\011\011requiresrestart = restart and not online\n\011end)\n\011box:moveadd(function(self,x,y)\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011line:onmove(x,y)\n\011\011end\n\011\011for i,check in ipairs(self.list) do\n\011\011\011check:onmove(x,y)\n\011\011end\n\011end)\n\011function box:scroll(amount)\n\011\011local move = amount*10\n\011\011if move==0 then return end\n\011\011for i,check in ipairs(self.list) do\n\011\011\011check:onmove(0,move)\n\011\011end\n\011end\n\011function box:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2-7 then return false end\n\011\011local scrolled = self.scrollbar:process(mx,my,button,event,wheel)\n\011\011if scrolled then self:scroll(scrolled) end\n\011\011local which = math.floor((my-self.y-11)/10)+1\n\011\011if which>0 and which<=self.numlist then self.list[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\n\011\011if event == 2 then\n\011\011\011for i,v in ipairs(self.list) do v.clicked = false end\n\011\011end\n\011\011return true\n\011end\n\011return box\nend\n}\nui_console = {\nnew = function(x,y,w,h)\n\011local con = ui_box.new(x,y,w,h)\n\011con.shown_lines = math.floor(con.h/10)\n\011con.max_lines = 300\n\011con.max_width = con.w-4\n\011con.lines = {}\n\011con.scrollbar = ui_scrollbar.new(con.x2-2,con.y+1,con.h-2,0,con.shown_lines)\n\011con:drawadd(function(self)\n\011\011self.scrollbar:draw()\n\011\011local count=0\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011if i>self.scrollbar.pos and i<= self.scrollbar.pos+self.shown_lines then\n\011\011\011\011line:draw(self.x+3,self.y+3+(count*10))\n\011\011\011\011count = count+1\n\011\011\011end\n\011\011end\n\011end)\n\011con:moveadd(function(self,x,y)\n\011\011self.scrollbar:onmove(x,y)\n\011end)\n\011function con:clear()\n\011\011self.lines = {}\n\011\011self.scrollbar:update(0,con.shown_lines)\n\011end\n\011function con:addstr(str,r,g,b)\n\011\011str = tostring(str)\n\011\011local nextl = str:find('\\n')\n\011\011while nextl do\n\011\011\011local line = str:sub(1,nextl-1)\n\011\011\011self:addline(line,r,g,b)\n\011\011\011str = str:sub(nextl+1)\n\011\011\011nextl = str:find('\\n')\n\011\011end\n\011\011self:addline(str,r,g,b) --anything leftover\n\011end\n\011function con:addline(line,r,g,b)\n\011\011if not line or line==\"\" then return end --No blank lines\n\011\011table.insert(self.lines,ui_text.newscroll(line,self.x,0,self.max_width,r,g,b))\n\011\011if #self.lines>self.max_lines then table.remove(self.lines,1) end\n\011\011self.scrollbar:update(#self.lines,self.shown_lines,#self.lines-self.shown_lines)\n\011end\n\011function con:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\n\011\011self.scrollbar:process(mx,my,button,event,wheel)\n\011\011local which = math.floor((my-self.y-1)/10)+1\n\011\011if which>0 and which<=self.shown_lines and self.lines[which+self.scrollbar.pos] then self.lines[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\n\011\011return true\n\011end\n\011return con\nend\n}\nui_window = {\nnew = function(x,y,w,h)\n\011local w=ui_box.new(x,y,w,h)\n\011w.sub={}\n\011function w:add(m,name)\n\011\011if name then w[name]=m end\n\011\011table.insert(self.sub,m)\n\011end\n\011w:drawadd(function(self)\n\011\011for i,sub in ipairs(self.sub) do\n\011\011\011sub:draw()\n\011\011end\n\011end)\n\011w:moveadd(function(self,x,y)\n\011\011for i,sub in ipairs(self.sub) do\n\011\011\011sub:onmove(x,y)\n\011\011end\n\011end)\n\011function w:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then if button == 0 then return end ui_button.sidepressed() return true end\n\011\011local ret\n\011\011for i,sub in ipairs(self.sub) do\n\011\011\011if sub:process(mx,my,button,event,wheel) then ret = true end\n\011\011end\n\011\011return ret\n\011end\n\011return w\nend\n}\n--Main window with everything!\nlocal mainwindow = ui_window.new(50,50,525,300)\nmainwindow:setbackground(10,10,10,235) mainwindow.drawbackground=true\nmainwindow:add(ui_console.new(275,148,300,189),\"menuconsole\")\nmainwindow:add(ui_checkbox.new(50,80,225,257),\"checkbox\")\ntooltip = ui_tooltip.new(0,1,250,\"\")\n\n--Some API functions you can call from other scripts\n--put 'using_manager=MANAGER ~= nil' or similar in your scripts, using_manager will be true if the manager is active\n--Print a message to the manager console, can be colored\nfunction MANAGER.print(msg,...)\n\011mainwindow.menuconsole:addstr(msg,unpack(arg))\nend\n--downloads and returns a file, so you can do whatever...\nfunction MANAGER.download(url)\n\011return download_file(url)\nend\n--Get various info about the system (if on windows, script directory, path seperator, if socket is loaded)\nfunction MANAGER.sysinfo()\n\011return {[\"isWindows\"]=WINDOWS, [\"scriptDir\"]=TPT_LUA_PATH, [\"pathSep\"]=PATH_SEP, [\"exeName\"] = EXE_NAME}\nend\n--Save a setting in the autorun settings file, ident should be your script name no one else would use.\n--Name is variable name, val is the value which will be saved/returned as a string\nfunction MANAGER.savesetting(ident,name,val)\n\011ident = tostring(ident)\n\011name = tostring(name)\n\011val = tostring(val)\n\011if settings[ident] then settings[ident][name]=val\n\011else settings[ident]={[name]=val} end\n\011save_last()\nend\n--Get a previously saved value, if it has one\nfunction MANAGER.getsetting(ident,name)\n\011if settings[ident] then return settings[ident][name] end\n\011return nil\nend\n--delete a setting, leave name nil to delete all of ident\nfunction MANAGER.delsetting(ident,name)\n\011if settings[ident] then\n\011if name then settings[ident][name]=nil\n\011else settings[ident]=nil end\n\011save_last()\n\011end\nend\n\n--mniip's download thing (mostly)\nlocal pattern = \"http://w*%.?(.-)(/.*)\"\nlocal function download_file(url)\n\011local _,_,host,rest = url:find(pattern)\n\011if not host or not rest then MANAGER.print(\"Bad link\") return end\n\011local conn=socket.tcp()\n\011if not conn then return end\n\011local succ=pcall(conn.connect,conn,host,80)\n\011conn:settimeout(5)\n\011if not succ then return end\n\011local userAgent = \"PowderToy/\"..tpt.version.major..\".\"..tpt.version.minor..\".\"..tpt.version.build..\" (\"..(WINDOWS and \"WIN; \" or \"LIN; \")..(jacobsmod and \"M1\" or \"M0\")..\") SCRIPT/\"..MANAGER.version\n\011succ,resp,something=pcall(conn.send,conn,\"GET \"..rest..\" HTTP/1.1\\r\\nHost: \"..host..\"\\r\\nConnection: close\\r\\nUser-Agent: \"..userAgent..\"\\r\\n\\n\")\n\011if not succ then return end\n\011local data=\"\"\n\011local c=\"\"\n\011while c do\n\011\011c=conn:receive(\"*l\")\n\011\011if c then\n\011\011\011data=data..\"\\n\"..c\n\011\011end\n\011end\n\011if data==\"\" then MANAGER.print(\"no data\") return end\n\011local first,last,code = data:find(\"HTTP/1%.1 (.-) .-\\n\")\n\011while last do\n\011\011data = data:sub(last+1)\n\011\011first,last,header = data:find(\"^([^\\n]-:.-)\\n\")\n\011\011--read something from headers?\n\011\011if header then\n\011\011\011if tonumber(code)==302 then\n\011\011\011\011local _,_,new = header:find(\"^Location: (.*)\")\n\011\011\011\011if new then return download_file(new) end\n\011\011\011end\n\011\011end\n\011end\n\011if host:find(\"pastebin.com\") then --pastebin adds some weird numbers\n\011\011_,_,data=data:find(\"\\n[^\\n]*\\n(.*)\\n.+\\n$\")\n\011end\n\011return data\nend\n--Downloads to a location\nlocal function download_script(ID,location)\n\011local file = download_file(\"http://starcatcher.us/scripts/main.lua?get=\"..ID)\n\011if file then\n\011\011f=io.open(location,\"w\")\n\011\011f:write(file)\n\011\011f:close()\n\011\011return true\n\011end\n\011return false\nend\n--Restart exe (if named correctly)\nlocal function do_restart()\n\011save_last()\n\011if WINDOWS then\n\011\011os.execute(\"TASKKILL /IM \\\"\"..EXE_NAME..\"\\\" /F &&START .\\\\\\\"\"..EXE_NAME..\"\\\"\")\n\011else\n\011\011os.execute(\"killall -s KILL \\\"\"..EXE_NAME..\"\\\" && ./\\\"\"..EXE_NAME..\"\\\"\")\n\011end\n\011MANAGER.print(\"Restart failed, do you have the exe name right?\",255,0,0)\nend\n--TPT interface\nlocal function step()\n\011gfx.fillRect(0,0,gfx.WIDTH,gfx.HEIGHT,0,0,0,150)\n\011mainwindow:draw()\n\011tpt.drawtext(280,140,\"Console Output:\")\n\011if requiresrestart then\n\011\011tpt.drawtext(280,88,\"Disabling a script requires a restart for effect!\",255,50,50)\n\011end\n\011tpt.drawtext(55,55,\"Click a script to toggle, hit DONE when finished\")\n\011tpt.drawtext(474,55,\"Script Manager v\"..MANAGER.version)--479 for simple versions\n\011tooltip:draw()\nend\nlocal function mouseclick(mousex,mousey,button,event,wheel)\n\011sidebutton:process(mousex,mousey,button,event,wheel)\n\011if MANAGER.hidden then return true end\n\n\011if mousex>612 or mousey>384 then return false end\n\011mainwindow:process(mousex,mousey,button,event,wheel)\n\011return false\nend\nlocal jacobsmod_old_menu_check = false\nlocal function keypress(key,nkey,modifier,event)\n\011if jacobsmod and key == 'o' and event == 1 then jacobsmod_old_menu_check = true end\n\011if nkey==27 and not MANAGER.hidden then MANAGER.hidden=true return false end\n\011if not MANAGER.hidden then return false end\nend\n--small button on right to bring up main menu\nlocal WHITE = {255,255,255,255}\nlocal BLACK = {0,0,0,255}\nlocal ICON = math.random(2) --pick a random icon\nlocal lua_letters= {{{2,2,2,7},{2,7,4,7},{6,7,6,11},{6,11,8,11},{8,7,8,11},{10,11,12,11},{10,11,10,15},{11,13,11,13},{12,11,12,15},},\n\011{{2,3,2,13},{2,14,7,14},{4,3,4,12},{4,12,7,12},{7,3,7,12},{9,3,12,3},{9,3,9,14},{10,8,11,8},{12,3,12,14},}}\nlocal function smallstep()\n\011gfx.drawRect(sidebutton.x, sidebutton.y+1, sidebutton.w+1, sidebutton.h+1,200,200,200)\n\011local color=WHITE\n\011if not MANAGER.hidden then\n\011\011step()\n\011\011gfx.fillRect(sidebutton.x, sidebutton.y+1, sidebutton.w+1, sidebutton.h+1)\n\011\011color=BLACK\n\011end\n\011for i,dline in ipairs(lua_letters[ICON]) do\n\011\011tpt.drawline(dline[1]+sidebutton.x,dline[2]+sidebutton.y,dline[3]+sidebutton.x,dline[4]+sidebutton.y,color[1],color[2],color[3])\n\011end\n\011if jacobsmod_old_menu_check then\n\011\011if tpt.oldmenu()==0 and sidebutton.y > 150 then sidebutton:onmove(0, -256) elseif tpt.oldmenu()==1 and sidebutton.y < 150 then sidebutton:onmove(0, 256) end\n\011\011jacobsmod_old_menu_check = false\n\011end\nend\n--button functions on click\nfunction ui_button.reloadpressed(self)\n\011load_filenames()\n\011gen_buttons()\n\011mainwindow.checkbox:updatescroll()\n\011if num_files == 0 then\n\011\011MANAGER.print(\"No scripts found in '\"..TPT_LUA_PATH..\"' folder\",255,255,0)\n\011\011fs.makeDirectory(TPT_LUA_PATH)\n\011else\n\011\011MANAGER.print(\"Reloaded file list, found \"..num_files..\" scripts\")\n\011end\nend\nfunction ui_button.selectnone(self)\n\011for i,but in ipairs(mainwindow.checkbox.list) do\n\011\011but.selected = false\n\011end\nend\nfunction ui_button.consoleclear(self)\n\011mainwindow.menuconsole:clear()\nend\nfunction ui_button.changeexename(self)\n\011local last = EXE_NAME\n\011local new = tpt.input(\"Change exe name\",\"Enter the exact name of powder toy executable\",EXE_NAME,EXE_NAME)\n\011if new~=last and new~=\"\" then\n\011\011MANAGER.print(\"Executable name changed to \"..new,255,255,0)\n\011\011EXE_NAME = new\n\011end\n\011save_last()\nend\nfunction ui_button.changedir(self)\n\011local last = TPT_LUA_PATH\n\011local new = tpt.input(\"Change search directory\",\"Enter the folder where your scripts are\",TPT_LUA_PATH,TPT_LUA_PATH)\n\011if new~=last and new~=\"\" then\n\011\011MANAGER.print(\"Directory changed to \"..new,255,255,0)\n\011\011TPT_LUA_PATH = new\n\011end\n\011ui_button.reloadpressed()\n\011save_last()\nend\nfunction ui_button.uploadscript(self)\n\011local command = WINDOWS and \"start\" or \"xdg-open\"\n\011os.execute(command..\" http://starcatcher.us/scripts/#submit-page\")\nend\nlocal lastpaused\nfunction ui_button.sidepressed(self)\n\011if TPTMP and TPTMP.chatHidden == false then print(\"minimize TPTMP before opening the manager\") return end\n\011MANAGER.hidden = not MANAGER.hidden\n\011ui_button.localview()\n\011if not MANAGER.hidden then\n\011\011lastpaused = tpt.set_pause()\n\011\011tpt.set_pause(1)\n\011\011ui_button.reloadpressed()\n\011else\n\011\011tpt.set_pause(lastpaused)\n\011end\nend\nlocal donebutton\nfunction ui_button.donepressed(self)\n\011MANAGER.hidden = true\n\011for i,but in ipairs(mainwindow.checkbox.list) do\n\011\011local filepath = but.ID and localscripts[but.ID][\"path\"] or but.t.text\n\011\011if but.selected then\n\011\011\011if requiresrestart then\n\011\011\011\011running[filepath] = true\n\011\011\011else\n\011\011\011\011if not running[filepath] then\n\011\011\011\011\011local status,err = pcall(dofile,TPT_LUA_PATH..PATH_SEP..filepath)\n\011\011\011\011\011if not status then\n\011\011\011\011\011\011MANAGER.print(err,255,0,0)\n\011\011\011\011\011\011print(err)\n\011\011\011\011\011\011but.selected = false\n\011\011\011\011\011else\n\011\011\011\011\011\011MANAGER.print(\"Started \"..filepath)\n\011\011\011\011\011\011running[filepath] = true\n\011\011\011\011\011end\n\011\011\011\011end\n\011\011\011end\n\011\011elseif running[filepath] then\n\011\011\011running[filepath] = nil\n\011\011end\n\011end\n\011if requiresrestart then do_restart() return end\n\011save_last()\nend\nfunction ui_button.downloadpressed(self)\n\011for i,but in ipairs(mainwindow.checkbox.list) do\n\011\011if but.selected then\n\011\011\011--maybe do better display names later\n\011\011\011local displayName\n\011\011\011local function get_script(butt)\n\011\011\011\011local script = download_file(\"http://starcatcher.us/scripts/main.lua?get=\"..butt.ID)\n\011\011\011\011displayName = \"downloaded\"..PATH_SEP..butt.ID..\" \"..onlinescripts[butt.ID].author..\"-\"..onlinescripts[butt.ID].name..\".lua\"\n\011\011\011\011local name = TPT_LUA_PATH..PATH_SEP..displayName\n\011\011\011\011if not fs.exists(TPT_LUA_PATH..PATH_SEP..\"downloaded\") then\n\011\011\011\011\011fs.makeDirectory(TPT_LUA_PATH..PATH_SEP..\"downloaded\")\n\011\011\011\011end\n\011\011\011\011local file = io.open(name, \"w\")\n\011\011\011\011if not file then error(\"could not open \"..name) end\n\011\011\011\011file:write(script)\n\011\011\011\011file:close()\n\011\011\011\011if localscripts[butt.ID] and localscripts[butt.ID][\"path\"] ~= displayName then\n\011\011\011\011\011local oldpath = localscripts[butt.ID][\"path\"]\n\011\011\011\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..oldpath:gsub(\"\\\\\",\"/\"))\n\011\011\011\011\011running[oldpath] = nil\n\011\011\011\011end\n\011\011\011\011localscripts[butt.ID] = onlinescripts[butt.ID]\n\011\011\011\011localscripts[butt.ID][\"path\"] = displayName\n\011\011\011\011dofile(name)\n\011\011\011end\n\011\011\011local status,err = pcall(get_script, but)\n\011\011\011if not status then\n\011\011\011\011MANAGER.print(err,255,0,0)\n\011\011\011\011print(err)\n\011\011\011\011but.selected = false\n\011\011\011else\n\011\011\011\011MANAGER.print(\"Downloaded and started \"..but.t.text)\n\011\011\011\011running[displayName] = true\n\011\011\011end\n\011\011end\n\011end\n\011MANAGER.hidden = true\n\011ui_button.localview()\n\011save_last()\nend\n\nfunction ui_button.pressed(self)\n\011self.selected = not self.selected\nend\nfunction ui_button.delete(self)\n\011--there is no tpt.confirm() yet\n\011if tpt.input(\"Delete File\", \"Delete \"..self.t.text..\"?\", \"yes\", \"no\") == \"yes\" then\n\011\011local filepath = self.ID and localscripts[self.ID][\"path\"] or self.t.text\n\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..filepath:gsub(\"\\\\\",\"/\"))\n\011\011if running[filepath] then running[filepath] = nil end\n\011\011if localscripts[self.ID] then localscripts[self.ID] = nil end\n\011\011save_last()\n\011\011ui_button.localview()\n\011\011load_filenames()\n\011\011gen_buttons()\n\011end\nend\nfunction ui_button.scriptcheck(self)\n\011local oldpath = localscripts[self.ID][\"path\"]\n\011local newpath = \"downloaded\"..PATH_SEP..self.ID..\" \"..onlinescripts[self.ID].author..\"-\"..onlinescripts[self.ID].name..\".lua\"\n\011if download_script(self.ID,TPT_LUA_PATH..PATH_SEP..newpath) then\n\011\011self.canupdate = false\n\011\011localscripts[self.ID] = onlinescripts[self.ID]\n\011\011localscripts[self.ID][\"path\"] = newpath\n\011\011if oldpath ~= newpath then\n\011\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..oldpath:gsub(\"\\\\\",\"/\"))\n\011\011\011if running[oldpath] then\n\011\011\011\011running[newpath],running[oldpath] = running[oldpath],nil\n\011\011\011end\n\011\011end\n\011\011if running[newpath] then\n\011\011\011do_restart()\n\011\011else\n\011\011\011MANAGER.print(\"Updated \"..onlinescripts[self.ID][\"name\"])\n\011\011end\n\011end\nend\nfunction ui_button.doupdate(self)\n\011if jacobsmod and jacobsmod >= 30 then\n\011\011fileSystem.move(\"scriptmanager.lua\", \"scriptmanagerold.lua\")\n\011\011download_script(1, 'scriptmanager.lua')\n\011else\n\011\011fileSystem.move(\"autorun.lua\", \"autorunold.lua\")\n\011\011download_script(1, 'autorun.lua')\n\011end\n\011localscripts[1] = updatetable[1]\n\011do_restart()\nend\nfunction ui_button.localview(self)\n\011if online then\n\011\011online = false\n\011\011gen_buttons()\n\011\011donebutton.t.text = \"DONE\"\n\011\011donebutton.w = 29 donebutton.x2 = donebutton.x + donebutton.w\n\011\011donebutton.f = ui_button.donepressed\n\011end\nend\nfunction ui_button.onlineview(self)\n\011if not online then\n\011\011online = true\n\011\011gen_buttons()\n\011\011donebutton.t.text = \"DOWNLOAD\"\n\011\011donebutton.w = 55 donebutton.x2 = donebutton.x + donebutton.w\n\011\011donebutton.f = ui_button.downloadpressed\n\011end\nend\n--add buttons to window\ndonebutton = ui_button.new(55,339,29,10,ui_button.donepressed,\"DONE\")\nmainwindow:add(donebutton)\nmainwindow:add(ui_button.new(134,339,40,10,ui_button.sidepressed,\"CANCEL\"))\n--mainwindow:add(ui_button.new(152,339,29,10,ui_button.selectnone,\"NONE\"))\nlocal nonebutton = ui_button.new(62,81,8,8,ui_button.selectnone,\"\")\nnonebutton.drawbox = true\nmainwindow:add(nonebutton)\nmainwindow:add(ui_button.new(538,339,33,10,ui_button.consoleclear,\"CLEAR\"))\nmainwindow:add(ui_button.new(278,67,40,10,ui_button.reloadpressed,\"RELOAD\"))\nmainwindow:add(ui_button.new(333,67,80,10,ui_button.changeexename,\"Change exe name\"))\nmainwindow:add(ui_button.new(428,67,51,10,ui_button.changedir,\"Change dir\"))\nmainwindow:add(ui_button.new(493,67,68,10,ui_button.uploadscript,\"Upload Script\"))\nlocal tempbutton = ui_button.new(60, 65, 30, 10, ui_button.localview, \"Local\")\ntempbutton.drawbox = true\nmainwindow:add(tempbutton)\ntempbutton = ui_button.new(100, 65, 35, 10, ui_button.onlineview, \"Online\")\ntempbutton.drawbox = true\nmainwindow:add(tempbutton)\nsidebutton = ui_button.new(613,134,14,15,ui_button.sidepressed,'')\nif jacobsmod and tpt.oldmenu()==1 then\n\011sidebutton:onmove(0, 256)\nend\n\nlocal function gen_buttons_local()\n\011local count = 0\n\011local sorted = {}\n\011for k,v in pairs(localscripts) do if v.ID ~= 1 then table.insert(sorted, v) end end\n\011table.sort(sorted, function(first,second) return first.name:lower() < second.name:lower() end)\n\011for i,v in ipairs(sorted) do\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed,ui_button.delete,v.name)\n\011\011check.ID = v.ID\n\011\011if running[v.path] then\n\011\011\011check.running = true\n\011\011\011check.selected = true\n\011\011end\n\011\011count = count + 1\n\011end\n\011if #sorted >= 5 and #filenames >= 5 then\n\011\011mainwindow.checkbox:add(nil, nil, \"\") --empty space to separate things\n\011end\n\011for i=1,#filenames do\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed,ui_button.delete,filenames[i])\n\011\011if running[filenames[i]] then\n\011\011\011check.running = true\n\011\011\011check.selected = true\n\011\011end\n\011end\n\011num_files = count + #filenames\nend\nlocal function gen_buttons_online()\n\011local list = download_file(\"http://starcatcher.us/scripts/main.lua\")\n\011onlinescripts = readScriptInfo(list)\n\011local sorted = {}\n\011for k,v in pairs(onlinescripts) do table.insert(sorted, v) end\n\011table.sort(sorted, function(first,second) return first.ID < second.ID end)\n\011for k,v in pairs(sorted) do\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed, nil, v.name)\n\011\011check.ID = v.ID\n\011\011check.checkbut.ID = v.ID\n\011\011if localscripts[v.ID] then\n\011\011\011check.running = true\n\011\011\011if tonumber(v.version) > tonumber(localscripts[check.ID].version) then\n\011\011\011\011check.checkbut.canupdate = true\n\011\011\011end\n\011\011end\n\011end\n\011if first_online then\n\011\011first_online = false\n\011\011local updateinfo = download_file(\"http://starcatcher.us/scripts/main.lua?info=1\")\n\011\011updatetable = readScriptInfo(updateinfo)\n\011\011if not updatetable[1] then return end\n\011\011if tonumber(updatetable[1].version) > scriptversion then\n\011\011\011local updatebutton = ui_button.new(278,127,40,10,ui_button.doupdate,\"UPDATE\")\n\011\011\011updatebutton.t:setcolor(25,255,25)\n\011\011\011mainwindow:add(updatebutton)\n\011\011\011MANAGER.print(\"A script manager update is available! Click UPDATE\",25,255,55)\n\011\011\011MANAGER.print(updatetable[1].changelog,25,255,55)\n\011\011end\n\011end\nend\ngen_buttons = function()\n\011mainwindow.checkbox:clear()\n\011if online then\n\011\011gen_buttons_online()\n\011else\n\011\011gen_buttons_local()\n\011end\n\011mainwindow.checkbox:updatescroll()\nend\ngen_buttons()\n\n--register manager first\ntpt.register_step(smallstep)\n--load previously running scripts\nlocal started = \"\"\nfor prev,v in pairs(running) do\n\011local status,err = pcall(dofile,TPT_LUA_PATH..PATH_SEP..prev)\n\011if not status then\n\011\011MANAGER.print(err,255,0,0)\n\011\011running[prev] = nil\n\011else\n\011\011started=started..\" \"..prev\n\011\011local newbut = mainwindow.checkbox:add(ui_button.pressed,prev)\n\011\011newbut.selected=true\n\011end\nend\nsave_last()\nif started~=\"\" then\n\011MANAGER.print(\"Auto started\"..started)\nend\ntpt.register_mouseevent(mouseclick)\ntpt.register_keypress(keypress)\n";
	luaL_loadbuffer(l, scriptmanager_luac, scriptmanager_luac_sz, "@scriptmanager.lua");
	lua_pcall(l, 0, 0, 0);
#endif
}
#endif
*/
